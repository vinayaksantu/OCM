<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="4" total="228" passed="176" failed="48" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2021-06-03T20:32:34 IST" name="Tetherfi Test Automation" finished-at="2021-06-03T22:06:47 IST" duration-ms="5653090">
    <groups>
      <group name="Checker">
        <method signature="RoleBasedAccessManagementCreateTest.ApproveforAddNewNewRoleBasedAccessManagementRecord()[pri:17, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="ApproveforAddNewNewRoleBasedAccessManagementRecord" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.VerifyAuditTrailReportForApprove()[pri:18, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="VerifyAuditTrailReportForApprove" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.VerifyRecordApprovedDataSectionafterApproval()[pri:19, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="VerifyRecordApprovedDataSectionafterApproval" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.RejectforAddNewNewRoleBasedAccessManagementRecord()[pri:9, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="RejectforAddNewNewRoleBasedAccessManagementRecord" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.VerifyAuditTrailReportForReject()[pri:10, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="VerifyAuditTrailReportForReject" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementDeleteTest.RejectforDeleteRoleBasedAccessManagementRecord()[pri:8, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" name="RejectforDeleteRoleBasedAccessManagementRecord" class="com.tetherfi.test.RoleBasedAccessManagementDeleteTest"/>
        <method signature="RoleBasedAccessManagementDeleteTest.VerifyAuditTrailReportForReject()[pri:9, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" name="VerifyAuditTrailReportForReject" class="com.tetherfi.test.RoleBasedAccessManagementDeleteTest"/>
        <method signature="RoleBasedAccessManagementDeleteTest.ApproveforDeleteRoleBasedAccessManagementRecord()[pri:14, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" name="ApproveforDeleteRoleBasedAccessManagementRecord" class="com.tetherfi.test.RoleBasedAccessManagementDeleteTest"/>
        <method signature="RoleBasedAccessManagementDeleteTest.VerifyAuditTrailReportForApprove()[pri:15, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" name="VerifyAuditTrailReportForApprove" class="com.tetherfi.test.RoleBasedAccessManagementDeleteTest"/>
        <method signature="RoleBasedAccessManagementUpdateTest.ApproveforEditRoleBasedAccessManagementRecord()[pri:14, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" name="ApproveforEditRoleBasedAccessManagementRecord" class="com.tetherfi.test.RoleBasedAccessManagementUpdateTest"/>
        <method signature="RoleBasedAccessManagementUpdateTest.VerifyAuditTrailReportForApprove()[pri:15, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" name="VerifyAuditTrailReportForApprove" class="com.tetherfi.test.RoleBasedAccessManagementUpdateTest"/>
        <method signature="RoleBasedAccessManagementUpdateTest.RejectforEditRoleBasedAccessManagementRecord()[pri:7, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" name="RejectforEditRoleBasedAccessManagementRecord" class="com.tetherfi.test.RoleBasedAccessManagementUpdateTest"/>
        <method signature="RoleBasedAccessManagementUpdateTest.VerifyAuditTrailReportForReject()[pri:8, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" name="VerifyAuditTrailReportForReject" class="com.tetherfi.test.RoleBasedAccessManagementUpdateTest"/>
      </group> <!-- Checker -->
      <group name="Maker">
        <method signature="RoleBasedAccessManagementCreateTest.AddNewNewRoleBasedAccessManagementRecord()[pri:12, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="AddNewNewRoleBasedAccessManagementRecord" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.AddRejectRecord()[pri:7, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="AddRejectRecord" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.AddRevertRecord()[pri:3, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="AddRevertRecord" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.VerifyAddCancelButton()[pri:1, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="VerifyAddCancelButton" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.VerifyAddRecordWithoutRole()[pri:2, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="VerifyAddRecordWithoutRole" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.VerifyAuditTrailDataForAddNewNewRoleBasedAccessManagementRecord()[pri:14, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="VerifyAuditTrailDataForAddNewNewRoleBasedAccessManagementRecord" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.VerifyAuditTrailReportForCreate()[pri:13, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="VerifyAuditTrailReportForCreate" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.VerifyAuditTrailReportForRevert()[pri:6, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="VerifyAuditTrailReportForRevert" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.VerifyRevertForAddNewRecord()[pri:4, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="VerifyRevertForAddNewRecord" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.VerifyApprovedDataSectionWithoutApproval()[pri:5, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="VerifyApprovedDataSectionWithoutApproval" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.VerifySendForApprovalForAddNewNewRoleBasedAccessManagementRecord()[pri:15, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="VerifySendForApprovalForAddNewNewRoleBasedAccessManagementRecord" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.VerifyAuditTrailReportForSendForApproval()[pri:16, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="VerifyAuditTrailReportForSendForApproval" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.VerifySendForApprovalForAddNewRecord()[pri:8, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="VerifySendForApprovalForAddNewRecord" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementCreateTest.VerifyRecordAfterRejection()[pri:11, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" name="VerifyRecordAfterRejection" class="com.tetherfi.test.RoleBasedAccessManagementCreateTest"/>
        <method signature="RoleBasedAccessManagementDeleteTest.DeleteCancelRoleBasedAccessManagementRecord()[pri:1, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" name="DeleteCancelRoleBasedAccessManagementRecord" class="com.tetherfi.test.RoleBasedAccessManagementDeleteTest"/>
        <method signature="RoleBasedAccessManagementDeleteTest.DeleteRecord()[pri:3, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" name="DeleteRecord" class="com.tetherfi.test.RoleBasedAccessManagementDeleteTest"/>
        <method signature="RoleBasedAccessManagementDeleteTest.DeleteRoleBasedAccessManagementRecord()[pri:10, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" name="DeleteRoleBasedAccessManagementRecord" class="com.tetherfi.test.RoleBasedAccessManagementDeleteTest"/>
        <method signature="RoleBasedAccessManagementDeleteTest.DeleteWithoutModifyReasonRecord()[pri:2, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" name="DeleteWithoutModifyReasonRecord" class="com.tetherfi.test.RoleBasedAccessManagementDeleteTest"/>
        <method signature="RoleBasedAccessManagementDeleteTest.RejectDeleteRecord()[pri:6, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" name="RejectDeleteRecord" class="com.tetherfi.test.RoleBasedAccessManagementDeleteTest"/>
        <method signature="RoleBasedAccessManagementDeleteTest.VerifyAuditTrailDataForDeleteRoleBasedAccessManagementRecord()[pri:12, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" name="VerifyAuditTrailDataForDeleteRoleBasedAccessManagementRecord" class="com.tetherfi.test.RoleBasedAccessManagementDeleteTest"/>
        <method signature="RoleBasedAccessManagementDeleteTest.VerifyAuditTrialReportForDelete()[pri:11, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" name="VerifyAuditTrialReportForDelete" class="com.tetherfi.test.RoleBasedAccessManagementDeleteTest"/>
        <method signature="RoleBasedAccessManagementDeleteTest.VerifyRevertForDeleteRecord()[pri:4, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" name="VerifyRevertForDeleteRecord" class="com.tetherfi.test.RoleBasedAccessManagementDeleteTest"/>
        <method signature="RoleBasedAccessManagementDeleteTest.VerifyAuditTrialReportForRevertDelete()[pri:5, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" name="VerifyAuditTrialReportForRevertDelete" class="com.tetherfi.test.RoleBasedAccessManagementDeleteTest"/>
        <method signature="RoleBasedAccessManagementDeleteTest.VerifySendForApprovalForDeleteNewRecord()[pri:13, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" name="VerifySendForApprovalForDeleteNewRecord" class="com.tetherfi.test.RoleBasedAccessManagementDeleteTest"/>
        <method signature="RoleBasedAccessManagementDeleteTest.VerifySendForApprovalForRejectDeleteNewRecord()[pri:7, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" name="VerifySendForApprovalForRejectDeleteNewRecord" class="com.tetherfi.test.RoleBasedAccessManagementDeleteTest"/>
        <method signature="RoleBasedAccessManagementUpdateTest.EditCancelRoleBasedAccessManagementRecord()[pri:1, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" name="EditCancelRoleBasedAccessManagementRecord" class="com.tetherfi.test.RoleBasedAccessManagementUpdateTest"/>
        <method signature="RoleBasedAccessManagementUpdateTest.EditRecordWithoutModifyReason()[pri:16, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" name="EditRecordWithoutModifyReason" class="com.tetherfi.test.RoleBasedAccessManagementUpdateTest"/>
        <method signature="RoleBasedAccessManagementUpdateTest.EditRejectRecord()[pri:5, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" name="EditRejectRecord" class="com.tetherfi.test.RoleBasedAccessManagementUpdateTest"/>
        <method signature="RoleBasedAccessManagementUpdateTest.EditRevertRoleBasedAccessManagementRecord()[pri:2, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" name="EditRevertRoleBasedAccessManagementRecord" class="com.tetherfi.test.RoleBasedAccessManagementUpdateTest"/>
        <method signature="RoleBasedAccessManagementUpdateTest.EditRoleBasedAccessManagementRecord()[pri:9, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" name="EditRoleBasedAccessManagementRecord" class="com.tetherfi.test.RoleBasedAccessManagementUpdateTest"/>
        <method signature="RoleBasedAccessManagementUpdateTest.VerifyAuditTrailDataForEditRoleBasedAccessManagementRecord()[pri:10, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" name="VerifyAuditTrailDataForEditRoleBasedAccessManagementRecord" class="com.tetherfi.test.RoleBasedAccessManagementUpdateTest"/>
        <method signature="RoleBasedAccessManagementUpdateTest.VerifyAuditTrialReportForSendForApprovalUpdate()[pri:13, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" name="VerifyAuditTrialReportForSendForApprovalUpdate" class="com.tetherfi.test.RoleBasedAccessManagementUpdateTest"/>
        <method signature="RoleBasedAccessManagementUpdateTest.VerifyAuditTrialReportForUpdate()[pri:11, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" name="VerifyAuditTrialReportForUpdate" class="com.tetherfi.test.RoleBasedAccessManagementUpdateTest"/>
        <method signature="RoleBasedAccessManagementUpdateTest.VerifyRevertForEditRecord()[pri:3, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" name="VerifyRevertForEditRecord" class="com.tetherfi.test.RoleBasedAccessManagementUpdateTest"/>
        <method signature="RoleBasedAccessManagementUpdateTest.VerifyAuditTrialReportForRevertUpdate()[pri:4, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" name="VerifyAuditTrialReportForRevertUpdate" class="com.tetherfi.test.RoleBasedAccessManagementUpdateTest"/>
        <method signature="RoleBasedAccessManagementUpdateTest.VerifySendForApprovalForEditRecord()[pri:12, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" name="VerifySendForApprovalForEditRecord" class="com.tetherfi.test.RoleBasedAccessManagementUpdateTest"/>
        <method signature="RoleBasedAccessManagementUpdateTest.VerifySendForApprovalForEditRejectRecord()[pri:6, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" name="VerifySendForApprovalForEditRejectRecord" class="com.tetherfi.test.RoleBasedAccessManagementUpdateTest"/>
      </group> <!-- Maker -->
    </groups>
    <test started-at="2021-06-03T20:32:34 IST" name="Modules" finished-at="2021-06-03T22:06:47 IST" duration-ms="5653090">
      <class name="com.tetherfi.test.RoleBasedAccessManagementUpdateTest">
        <test-method is-config="true" signature="NavigateRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:35:11 IST" name="NavigateRoleBasedAccessManagementPage" finished-at="2021-06-03T21:35:35 IST" duration-ms="24268" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.EditCancelRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateRoleBasedAccessManagementPage -->
        <test-method signature="EditCancelRoleBasedAccessManagementRecord()[pri:1, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:35:35 IST" name="EditCancelRoleBasedAccessManagementRecord" finished-at="2021-06-03T21:35:47 IST" duration-ms="12083" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditCancelRoleBasedAccessManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:35:47 IST" name="afterEachMethod" finished-at="2021-06-03T21:35:52 IST" duration-ms="5201" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.EditCancelRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:35:52 IST" name="NavigateRoleBasedAccessManagementPage" finished-at="2021-06-03T21:36:09 IST" duration-ms="16744" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.EditRevertRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateRoleBasedAccessManagementPage -->
        <test-method signature="EditRevertRoleBasedAccessManagementRecord()[pri:2, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:36:09 IST" name="EditRevertRoleBasedAccessManagementRecord" finished-at="2021-06-03T21:36:25 IST" duration-ms="16225" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditRevertRoleBasedAccessManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:36:25 IST" name="afterEachMethod" finished-at="2021-06-03T21:36:30 IST" duration-ms="4527" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.EditRevertRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:36:30 IST" name="NavigateRoleBasedAccessManagementPage" finished-at="2021-06-03T21:36:51 IST" duration-ms="21697" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifyRevertForEditRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateRoleBasedAccessManagementPage -->
        <test-method signature="VerifyRevertForEditRecord()[pri:3, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:36:51 IST" name="VerifyRevertForEditRecord" finished-at="2021-06-03T21:37:04 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementUpdateTest.EditRevertRoleBasedAccessManagementRecord" duration-ms="12570" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyRevertForEditRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:37:04 IST" name="afterEachMethod" finished-at="2021-06-03T21:37:09 IST" duration-ms="5406" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifyRevertForEditRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:37:09 IST" name="NavigateRoleBasedAccessManagementPage" finished-at="2021-06-03T21:37:31 IST" duration-ms="21748" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifyAuditTrialReportForRevertUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrialReportForRevertUpdate()[pri:4, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:37:31 IST" name="VerifyAuditTrialReportForRevertUpdate" finished-at="2021-06-03T21:38:09 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifyRevertForEditRecord" duration-ms="37481" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForRevertUpdate -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:38:09 IST" name="afterEachMethod" finished-at="2021-06-03T21:38:13 IST" duration-ms="4307" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifyAuditTrialReportForRevertUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:38:13 IST" name="NavigateRoleBasedAccessManagementPage" finished-at="2021-06-03T21:38:34 IST" duration-ms="20722" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.EditRejectRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateRoleBasedAccessManagementPage -->
        <test-method signature="EditRejectRecord()[pri:5, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:38:34 IST" name="EditRejectRecord" finished-at="2021-06-03T21:38:50 IST" duration-ms="16432" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditRejectRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:38:50 IST" name="afterEachMethod" finished-at="2021-06-03T21:38:55 IST" duration-ms="4581" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.EditRejectRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:38:55 IST" name="NavigateRoleBasedAccessManagementPage" finished-at="2021-06-03T21:39:13 IST" duration-ms="18339" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifySendForApprovalForEditRejectRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateRoleBasedAccessManagementPage -->
        <test-method signature="VerifySendForApprovalForEditRejectRecord()[pri:6, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:39:13 IST" name="VerifySendForApprovalForEditRejectRecord" finished-at="2021-06-03T21:39:26 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementUpdateTest.EditRejectRecord" duration-ms="13089" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySendForApprovalForEditRejectRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:39:26 IST" name="afterEachMethod" finished-at="2021-06-03T21:39:31 IST" duration-ms="5158" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifySendForApprovalForEditRejectRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:39:31 IST" name="NavigateRoleBasedAccessManagementPage" finished-at="2021-06-03T21:39:50 IST" duration-ms="18933" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.RejectforEditRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateRoleBasedAccessManagementPage -->
        <test-method signature="RejectforEditRoleBasedAccessManagementRecord()[pri:7, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:39:50 IST" name="RejectforEditRoleBasedAccessManagementRecord" finished-at="2021-06-03T21:40:07 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifySendForApprovalForEditRejectRecord" duration-ms="16990" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RejectforEditRoleBasedAccessManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:40:07 IST" name="afterEachMethod" finished-at="2021-06-03T21:40:13 IST" duration-ms="5425" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.RejectforEditRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:40:13 IST" name="NavigateRoleBasedAccessManagementPage" finished-at="2021-06-03T21:40:29 IST" duration-ms="16195" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifyAuditTrailReportForReject() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrailReportForReject()[pri:8, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:40:29 IST" name="VerifyAuditTrailReportForReject" finished-at="2021-06-03T21:41:07 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementUpdateTest.RejectforEditRoleBasedAccessManagementRecord" duration-ms="37917" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrailReportForReject -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:41:07 IST" name="afterEachMethod" finished-at="2021-06-03T21:41:11 IST" duration-ms="4641" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifyAuditTrailReportForReject() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:41:11 IST" name="NavigateRoleBasedAccessManagementPage" finished-at="2021-06-03T21:41:28 IST" duration-ms="17108" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.EditRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateRoleBasedAccessManagementPage -->
        <test-method signature="EditRoleBasedAccessManagementRecord()[pri:9, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:41:28 IST" name="EditRoleBasedAccessManagementRecord" finished-at="2021-06-03T21:41:46 IST" duration-ms="17622" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditRoleBasedAccessManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:41:46 IST" name="afterEachMethod" finished-at="2021-06-03T21:41:52 IST" duration-ms="5544" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.EditRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:41:52 IST" name="NavigateRoleBasedAccessManagementPage" finished-at="2021-06-03T21:42:08 IST" duration-ms="16076" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifyAuditTrailDataForEditRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrailDataForEditRoleBasedAccessManagementRecord()[pri:10, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:42:08 IST" name="VerifyAuditTrailDataForEditRoleBasedAccessManagementRecord" finished-at="2021-06-03T21:42:17 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementUpdateTest.EditRoleBasedAccessManagementRecord" duration-ms="9003" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Audit trail details failed did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Audit trail details failed did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifyAuditTrailDataForEditRoleBasedAccessManagementRecord(RoleBasedAccessManagementUpdateTest.java:166)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrailDataForEditRoleBasedAccessManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:42:17 IST" name="afterEachMethod" finished-at="2021-06-03T21:42:21 IST" duration-ms="4576" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifyAuditTrailDataForEditRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:42:21 IST" name="NavigateRoleBasedAccessManagementPage" finished-at="2021-06-03T21:42:40 IST" duration-ms="18270" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifyAuditTrialReportForUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrialReportForUpdate()[pri:11, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:42:40 IST" name="VerifyAuditTrialReportForUpdate" finished-at="2021-06-03T21:43:14 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementUpdateTest.EditRoleBasedAccessManagementRecord" duration-ms="34797" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForUpdate -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:43:14 IST" name="afterEachMethod" finished-at="2021-06-03T21:43:19 IST" duration-ms="4739" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifyAuditTrialReportForUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:43:19 IST" name="NavigateRoleBasedAccessManagementPage" finished-at="2021-06-03T21:43:38 IST" duration-ms="19189" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifySendForApprovalForEditRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateRoleBasedAccessManagementPage -->
        <test-method signature="VerifySendForApprovalForEditRecord()[pri:12, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:43:38 IST" name="VerifySendForApprovalForEditRecord" finished-at="2021-06-03T21:43:50 IST" duration-ms="12199" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySendForApprovalForEditRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:43:50 IST" name="afterEachMethod" finished-at="2021-06-03T21:43:55 IST" duration-ms="4832" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifySendForApprovalForEditRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:43:55 IST" name="NavigateRoleBasedAccessManagementPage" finished-at="2021-06-03T21:44:14 IST" duration-ms="18387" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifyAuditTrialReportForSendForApprovalUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrialReportForSendForApprovalUpdate()[pri:13, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:44:14 IST" name="VerifyAuditTrialReportForSendForApprovalUpdate" finished-at="2021-06-03T21:44:49 IST" duration-ms="35348" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForSendForApprovalUpdate -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:44:49 IST" name="afterEachMethod" finished-at="2021-06-03T21:44:54 IST" duration-ms="4899" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifyAuditTrialReportForSendForApprovalUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:44:54 IST" name="NavigateRoleBasedAccessManagementPage" finished-at="2021-06-03T21:45:10 IST" duration-ms="15803" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.ApproveforEditRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateRoleBasedAccessManagementPage -->
        <test-method signature="ApproveforEditRoleBasedAccessManagementRecord()[pri:14, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:45:10 IST" name="ApproveforEditRoleBasedAccessManagementRecord" finished-at="2021-06-03T21:45:27 IST" duration-ms="17270" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ApproveforEditRoleBasedAccessManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:45:27 IST" name="afterEachMethod" finished-at="2021-06-03T21:45:32 IST" duration-ms="4965" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.ApproveforEditRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:45:32 IST" name="NavigateRoleBasedAccessManagementPage" finished-at="2021-06-03T21:45:51 IST" duration-ms="18540" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifyAuditTrailReportForApprove() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrailReportForApprove()[pri:15, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:45:51 IST" name="VerifyAuditTrailReportForApprove" finished-at="2021-06-03T21:46:26 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementUpdateTest.ApproveforEditRoleBasedAccessManagementRecord" duration-ms="35326" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrailReportForApprove -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:46:26 IST" name="afterEachMethod" finished-at="2021-06-03T21:46:31 IST" duration-ms="4779" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.VerifyAuditTrailReportForApprove() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:46:31 IST" name="NavigateRoleBasedAccessManagementPage" finished-at="2021-06-03T21:46:50 IST" duration-ms="19439" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.EditRecordWithoutModifyReason() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateRoleBasedAccessManagementPage -->
        <test-method signature="EditRecordWithoutModifyReason()[pri:16, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:46:50 IST" name="EditRecordWithoutModifyReason" finished-at="2021-06-03T21:47:04 IST" duration-ms="14062" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditRecordWithoutModifyReason -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUpdateTest@7c4d1c7b]" started-at="2021-06-03T21:47:04 IST" name="afterEachMethod" finished-at="2021-06-03T21:47:09 IST" duration-ms="4592" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUpdateTest.EditRecordWithoutModifyReason() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
      </class> <!-- com.tetherfi.test.RoleBasedAccessManagementUpdateTest -->
      <class name="com.tetherfi.test.ExportSchedulerTest">
        <test-method is-config="true" signature="openApplication()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:43:26 IST" name="openApplication" finished-at="2021-06-03T20:43:39 IST" duration-ms="13446" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openApplication -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:43:39 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:43:43 IST" duration-ms="4057" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:43:39 IST" name="startTestCase" finished-at="2021-06-03T20:43:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.ExportSchedulerPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="ExportSchedulerPage()[pri:1, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:43:43 IST" name="ExportSchedulerPage" finished-at="2021-06-03T20:43:44 IST" duration-ms="708" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExportSchedulerPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:43:44 IST" name="afterEachMethod" finished-at="2021-06-03T20:43:46 IST" duration-ms="1737" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.ExportSchedulerPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:43:46 IST" name="endTestCase" finished-at="2021-06-03T20:43:46 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.ExportSchedulerPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:43:46 IST" name="startTestCase" finished-at="2021-06-03T20:43:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:43:46 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:43:51 IST" duration-ms="5033" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifyDropdownForAllTheColumns()[pri:2, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:43:51 IST" name="VerifyDropdownForAllTheColumns" finished-at="2021-06-03T20:44:17 IST" duration-ms="26726" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyDropdownForAllTheColumns -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:17 IST" name="afterEachMethod" finished-at="2021-06-03T20:44:19 IST" duration-ms="1712" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:19 IST" name="endTestCase" finished-at="2021-06-03T20:44:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:19 IST" name="startTestCase" finished-at="2021-06-03T20:44:19 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyColumnsHeaderEnable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:19 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:44:24 IST" duration-ms="4880" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifyColumnsHeaderEnable()[pri:3, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:24 IST" name="VerifyColumnsHeaderEnable" finished-at="2021-06-03T20:44:34 IST" duration-ms="9683" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyColumnsHeaderEnable -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:34 IST" name="afterEachMethod" finished-at="2021-06-03T20:44:35 IST" duration-ms="1735" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyColumnsHeaderEnable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:35 IST" name="endTestCase" finished-at="2021-06-03T20:44:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyColumnsHeaderEnable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:35 IST" name="startTestCase" finished-at="2021-06-03T20:44:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:35 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:44:41 IST" duration-ms="5350" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifyColumnsHeaderDisable()[pri:4, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:41 IST" name="VerifyColumnsHeaderDisable" finished-at="2021-06-03T20:44:41 IST" duration-ms="80" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyColumnsHeaderDisable -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:41 IST" name="afterEachMethod" finished-at="2021-06-03T20:44:43 IST" duration-ms="1828" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:43 IST" name="endTestCase" finished-at="2021-06-03T20:44:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:43 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:44:47 IST" duration-ms="4214" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:43 IST" name="startTestCase" finished-at="2021-06-03T20:44:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddExportSchedulerDailyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddExportSchedulerDailyRecord()[pri:5, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:47 IST" name="AddExportSchedulerDailyRecord" finished-at="2021-06-03T20:44:55 IST" duration-ms="7820" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddExportSchedulerDailyRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:55 IST" name="afterEachMethod" finished-at="2021-06-03T20:44:57 IST" duration-ms="2131" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddExportSchedulerDailyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:57 IST" name="endTestCase" finished-at="2021-06-03T20:44:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddExportSchedulerDailyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:57 IST" name="startTestCase" finished-at="2021-06-03T20:44:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:44:57 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:45:01 IST" duration-ms="4702" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifyAuditTrialReportForCreate()[pri:6, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:45:01 IST" name="VerifyAuditTrialReportForCreate" finished-at="2021-06-03T20:45:38 IST" duration-ms="36134" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForCreate -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:45:38 IST" name="afterEachMethod" finished-at="2021-06-03T20:45:40 IST" duration-ms="2120" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:45:40 IST" name="endTestCase" finished-at="2021-06-03T20:45:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:45:40 IST" name="startTestCase" finished-at="2021-06-03T20:45:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DuplicateRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:45:40 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:45:45 IST" duration-ms="5350" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="DuplicateRecord()[pri:7, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:45:45 IST" name="DuplicateRecord" finished-at="2021-06-03T20:45:52 IST" duration-ms="7176" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DuplicateRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:45:52 IST" name="afterEachMethod" finished-at="2021-06-03T20:45:53 IST" duration-ms="356" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DuplicateRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:45:53 IST" name="endTestCase" finished-at="2021-06-03T20:45:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DuplicateRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:45:53 IST" name="startTestCase" finished-at="2021-06-03T20:45:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddExportSchedulerWeeklyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:45:53 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:45:59 IST" duration-ms="6844" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="AddExportSchedulerWeeklyRecord()[pri:8, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:45:59 IST" name="AddExportSchedulerWeeklyRecord" finished-at="2021-06-03T20:46:09 IST" duration-ms="9729" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddExportSchedulerWeeklyRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:46:09 IST" name="afterEachMethod" finished-at="2021-06-03T20:46:11 IST" duration-ms="1776" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddExportSchedulerWeeklyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:46:11 IST" name="endTestCase" finished-at="2021-06-03T20:46:11 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddExportSchedulerWeeklyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:46:11 IST" name="startTestCase" finished-at="2021-06-03T20:46:11 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForWeeklyCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:46:11 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:46:16 IST" duration-ms="5379" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifyAuditTrialReportForWeeklyCreate()[pri:9, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:46:16 IST" name="VerifyAuditTrialReportForWeeklyCreate" finished-at="2021-06-03T20:46:49 IST" duration-ms="32341" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForWeeklyCreate -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:46:49 IST" name="afterEachMethod" finished-at="2021-06-03T20:46:50 IST" duration-ms="1674" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForWeeklyCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:46:50 IST" name="endTestCase" finished-at="2021-06-03T20:46:50 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForWeeklyCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:46:50 IST" name="startTestCase" finished-at="2021-06-03T20:46:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddExportSchedulerMonthlyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:46:50 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:46:56 IST" duration-ms="5451" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="AddExportSchedulerMonthlyRecord()[pri:10, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:46:56 IST" name="AddExportSchedulerMonthlyRecord" finished-at="2021-06-03T20:47:08 IST" duration-ms="11858" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddExportSchedulerMonthlyRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:47:08 IST" name="afterEachMethod" finished-at="2021-06-03T20:47:09 IST" duration-ms="1618" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddExportSchedulerMonthlyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:47:09 IST" name="endTestCase" finished-at="2021-06-03T20:47:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddExportSchedulerMonthlyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:47:09 IST" name="startTestCase" finished-at="2021-06-03T20:47:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForCreateMonthly() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:47:09 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:47:14 IST" duration-ms="4719" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifyAuditTrialReportForCreateMonthly()[pri:11, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:47:14 IST" name="VerifyAuditTrialReportForCreateMonthly" finished-at="2021-06-03T20:47:48 IST" duration-ms="33959" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <message>
              <![CDATA[Cannot invoke "String.equals(Object)" because the return value of "java.util.Map.get(Object)" is null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException: Cannot invoke "String.equals(Object)" because the return value of "java.util.Map.get(Object)" is null
at com.tetherfi.pages.OCMReportsPage.verifyExportSchedulerMonthlyCreate(OCMReportsPage.java:6266)
at com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForCreateMonthly(ExportSchedulerTest.java:146)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForCreateMonthly -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:47:48 IST" name="afterEachMethod" finished-at="2021-06-03T20:47:49 IST" duration-ms="1430" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForCreateMonthly() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:47:49 IST" name="endTestCase" finished-at="2021-06-03T20:47:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForCreateMonthly() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:47:49 IST" name="startTestCase" finished-at="2021-06-03T20:47:49 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddExportSchedulerCustomDailyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:47:49 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:47:55 IST" duration-ms="5681" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="AddExportSchedulerCustomDailyRecord()[pri:12, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:47:55 IST" name="AddExportSchedulerCustomDailyRecord" finished-at="2021-06-03T20:48:02 IST" duration-ms="7111" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddExportSchedulerCustomDailyRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:48:02 IST" name="afterEachMethod" finished-at="2021-06-03T20:48:02 IST" duration-ms="186" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddExportSchedulerCustomDailyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:48:02 IST" name="endTestCase" finished-at="2021-06-03T20:48:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddExportSchedulerCustomDailyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:48:02 IST" name="startTestCase" finished-at="2021-06-03T20:48:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForCreateCustomDaily() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:48:02 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:48:09 IST" duration-ms="6824" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifyAuditTrialReportForCreateCustomDaily()[pri:13, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:48:09 IST" name="VerifyAuditTrialReportForCreateCustomDaily" finished-at="2021-06-03T20:48:43 IST" duration-ms="34208" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForCreateCustomDaily -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:48:43 IST" name="afterEachMethod" finished-at="2021-06-03T20:48:45 IST" duration-ms="1747" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForCreateCustomDaily() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:48:45 IST" name="endTestCase" finished-at="2021-06-03T20:48:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForCreateCustomDaily() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:48:45 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:48:50 IST" duration-ms="5118" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:48:45 IST" name="startTestCase" finished-at="2021-06-03T20:48:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyCancelBtnAtAddRecord()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyCancelBtnAtAddRecord()[pri:14, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:48:50 IST" name="VerifyCancelBtnAtAddRecord" finished-at="2021-06-03T20:49:14 IST" duration-ms="23907" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyCancelBtnAtAddRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:14 IST" name="afterEachMethod" finished-at="2021-06-03T20:49:16 IST" duration-ms="1707" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyCancelBtnAtAddRecord()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:16 IST" name="endTestCase" finished-at="2021-06-03T20:49:16 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyCancelBtnAtAddRecord()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:16 IST" name="startTestCase" finished-at="2021-06-03T20:49:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutName() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:16 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:49:21 IST" duration-ms="5423" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="AddRecordWithoutName()[pri:15, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:21 IST" name="AddRecordWithoutName" finished-at="2021-06-03T20:49:30 IST" duration-ms="8419" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutName -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:30 IST" name="afterEachMethod" finished-at="2021-06-03T20:49:31 IST" duration-ms="1553" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutName() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:31 IST" name="endTestCase" finished-at="2021-06-03T20:49:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutName() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:31 IST" name="startTestCase" finished-at="2021-06-03T20:49:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutFrequency() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:31 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:49:37 IST" duration-ms="5341" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="AddRecordWithoutFrequency()[pri:16, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:37 IST" name="AddRecordWithoutFrequency" finished-at="2021-06-03T20:49:42 IST" duration-ms="4942" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutFrequency -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:42 IST" name="afterEachMethod" finished-at="2021-06-03T20:49:42 IST" duration-ms="246" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutFrequency() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:42 IST" name="endTestCase" finished-at="2021-06-03T20:49:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutFrequency() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:42 IST" name="startTestCase" finished-at="2021-06-03T20:49:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutTime() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:42 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:49:49 IST" duration-ms="6838" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="AddRecordWithoutTime()[pri:17, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:49 IST" name="AddRecordWithoutTime" finished-at="2021-06-03T20:49:56 IST" duration-ms="6825" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutTime -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:56 IST" name="afterEachMethod" finished-at="2021-06-03T20:49:56 IST" duration-ms="284" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutTime() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:56 IST" name="endTestCase" finished-at="2021-06-03T20:49:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutTime() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:56 IST" name="startTestCase" finished-at="2021-06-03T20:49:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutReport() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:49:56 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:50:02 IST" duration-ms="6294" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="AddRecordWithoutReport()[pri:18, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:02 IST" name="AddRecordWithoutReport" finished-at="2021-06-03T20:50:08 IST" duration-ms="5541" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutReport -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:08 IST" name="afterEachMethod" finished-at="2021-06-03T20:50:09 IST" duration-ms="1710" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutReport() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:09 IST" name="endTestCase" finished-at="2021-06-03T20:50:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutReport() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:09 IST" name="startTestCase" finished-at="2021-06-03T20:50:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutDay() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:09 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:50:15 IST" duration-ms="5204" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="AddRecordWithoutDay()[pri:19, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:15 IST" name="AddRecordWithoutDay" finished-at="2021-06-03T20:50:21 IST" duration-ms="6312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutDay -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:21 IST" name="afterEachMethod" finished-at="2021-06-03T20:50:23 IST" duration-ms="1666" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutDay() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:23 IST" name="endTestCase" finished-at="2021-06-03T20:50:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutDay() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:23 IST" name="startTestCase" finished-at="2021-06-03T20:50:23 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutWeeklyTime() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:23 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:50:28 IST" duration-ms="5088" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="AddRecordWithoutWeeklyTime()[pri:20, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:28 IST" name="AddRecordWithoutWeeklyTime" finished-at="2021-06-03T20:50:36 IST" duration-ms="8328" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutWeeklyTime -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:36 IST" name="afterEachMethod" finished-at="2021-06-03T20:50:38 IST" duration-ms="1690" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutWeeklyTime() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:38 IST" name="endTestCase" finished-at="2021-06-03T20:50:38 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutWeeklyTime() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:38 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:50:43 IST" duration-ms="5399" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:38 IST" name="startTestCase" finished-at="2021-06-03T20:50:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutMonthlyDate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddRecordWithoutMonthlyDate()[pri:21, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:43 IST" name="AddRecordWithoutMonthlyDate" finished-at="2021-06-03T20:50:50 IST" duration-ms="6505" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutMonthlyDate -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:50 IST" name="afterEachMethod" finished-at="2021-06-03T20:50:51 IST" duration-ms="1859" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutMonthlyDate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:51 IST" name="endTestCase" finished-at="2021-06-03T20:50:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutMonthlyDate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:51 IST" name="startTestCase" finished-at="2021-06-03T20:50:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutMonthlyTime() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:51 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:50:57 IST" duration-ms="5671" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="AddRecordWithoutMonthlyTime()[pri:22, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:50:57 IST" name="AddRecordWithoutMonthlyTime" finished-at="2021-06-03T20:51:06 IST" duration-ms="9386" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutMonthlyTime -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:06 IST" name="afterEachMethod" finished-at="2021-06-03T20:51:08 IST" duration-ms="1591" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutMonthlyTime() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:08 IST" name="endTestCase" finished-at="2021-06-03T20:51:08 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutMonthlyTime() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:08 IST" name="startTestCase" finished-at="2021-06-03T20:51:08 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutStartTime() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:08 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:51:13 IST" duration-ms="5009" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="AddRecordWithoutStartTime()[pri:23, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:13 IST" name="AddRecordWithoutStartTime" finished-at="2021-06-03T20:51:20 IST" duration-ms="6538" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutStartTime -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:20 IST" name="afterEachMethod" finished-at="2021-06-03T20:51:21 IST" duration-ms="1665" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutStartTime() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:21 IST" name="endTestCase" finished-at="2021-06-03T20:51:21 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutStartTime() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:21 IST" name="startTestCase" finished-at="2021-06-03T20:51:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutEndTime() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:21 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:51:27 IST" duration-ms="5279" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="AddRecordWithoutEndTime()[pri:24, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:27 IST" name="AddRecordWithoutEndTime" finished-at="2021-06-03T20:51:33 IST" duration-ms="6824" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Invalid record assertion failed expected [Please Provide Time] but found [Select the End Time]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Invalid record assertion failed expected [Please Provide Time] but found [Select the End Time]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.assertEqualsImpl(Assert.java:136)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:575)
at com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutEndTime(ExportSchedulerTest.java:279)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutEndTime -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:33 IST" name="afterEachMethod" finished-at="2021-06-03T20:51:35 IST" duration-ms="1640" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutEndTime() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:35 IST" name="endTestCase" finished-at="2021-06-03T20:51:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.AddRecordWithoutEndTime() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:35 IST" name="startTestCase" finished-at="2021-06-03T20:51:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.EditWithoutModifyReasonRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:35 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:51:40 IST" duration-ms="5246" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="EditWithoutModifyReasonRecord()[pri:25, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:40 IST" name="EditWithoutModifyReasonRecord" finished-at="2021-06-03T20:51:54 IST" duration-ms="13389" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditWithoutModifyReasonRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:54 IST" name="afterEachMethod" finished-at="2021-06-03T20:51:55 IST" duration-ms="1721" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.EditWithoutModifyReasonRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:55 IST" name="endTestCase" finished-at="2021-06-03T20:51:55 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.EditWithoutModifyReasonRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:55 IST" name="startTestCase" finished-at="2021-06-03T20:51:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyCancelBtnAtEditRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:51:55 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:52:01 IST" duration-ms="5312" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifyCancelBtnAtEditRecord()[pri:26, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:52:01 IST" name="VerifyCancelBtnAtEditRecord" finished-at="2021-06-03T20:52:36 IST" duration-ms="34948" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyCancelBtnAtEditRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:52:36 IST" name="afterEachMethod" finished-at="2021-06-03T20:52:38 IST" duration-ms="1881" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyCancelBtnAtEditRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:52:38 IST" name="endTestCase" finished-at="2021-06-03T20:52:38 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyCancelBtnAtEditRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:52:38 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:52:42 IST" duration-ms="4638" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:52:38 IST" name="startTestCase" finished-at="2021-06-03T20:52:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.EditExportSchedulerRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="EditExportSchedulerRecord()[pri:27, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:52:42 IST" name="EditExportSchedulerRecord" finished-at="2021-06-03T20:52:58 IST" duration-ms="15607" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditExportSchedulerRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:52:58 IST" name="afterEachMethod" finished-at="2021-06-03T20:52:58 IST" duration-ms="285" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.EditExportSchedulerRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:52:58 IST" name="endTestCase" finished-at="2021-06-03T20:52:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.EditExportSchedulerRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:52:58 IST" name="startTestCase" finished-at="2021-06-03T20:52:58 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:52:58 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:53:05 IST" duration-ms="6893" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifyAuditTrialReportForUpdate()[pri:28, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:53:05 IST" name="VerifyAuditTrialReportForUpdate" finished-at="2021-06-03T20:53:41 IST" duration-ms="36203" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForUpdate(ExportSchedulerTest.java:327)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForUpdate -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:53:41 IST" name="afterEachMethod" finished-at="2021-06-03T20:53:43 IST" duration-ms="1645" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:53:43 IST" name="endTestCase" finished-at="2021-06-03T20:53:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:53:43 IST" name="startTestCase" finished-at="2021-06-03T20:53:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifySearchIsNotEqualTo() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:53:43 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:53:49 IST" duration-ms="5857" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifySearchIsNotEqualTo()[pri:29, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:53:49 IST" name="VerifySearchIsNotEqualTo" finished-at="2021-06-03T20:54:00 IST" duration-ms="11623" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchIsNotEqualTo -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:00 IST" name="afterEachMethod" finished-at="2021-06-03T20:54:02 IST" duration-ms="1679" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifySearchIsNotEqualTo() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:02 IST" name="endTestCase" finished-at="2021-06-03T20:54:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifySearchIsNotEqualTo() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:02 IST" name="startTestCase" finished-at="2021-06-03T20:54:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifySearchContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:02 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:54:07 IST" duration-ms="5330" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifySearchContains()[pri:30, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:07 IST" name="VerifySearchContains" finished-at="2021-06-03T20:54:20 IST" duration-ms="12795" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchContains -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:20 IST" name="afterEachMethod" finished-at="2021-06-03T20:54:22 IST" duration-ms="1641" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifySearchContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:22 IST" name="endTestCase" finished-at="2021-06-03T20:54:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifySearchContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:22 IST" name="startTestCase" finished-at="2021-06-03T20:54:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifySearchDoesNotContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:22 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:54:27 IST" duration-ms="4883" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifySearchDoesNotContains()[pri:31, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:27 IST" name="VerifySearchDoesNotContains" finished-at="2021-06-03T20:54:38 IST" duration-ms="10938" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchDoesNotContains -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:38 IST" name="afterEachMethod" finished-at="2021-06-03T20:54:39 IST" duration-ms="1778" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifySearchDoesNotContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:39 IST" name="endTestCase" finished-at="2021-06-03T20:54:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifySearchDoesNotContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:39 IST" name="startTestCase" finished-at="2021-06-03T20:54:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifySearchStartsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:39 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:54:44 IST" duration-ms="4424" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifySearchStartsWith()[pri:32, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:44 IST" name="VerifySearchStartsWith" finished-at="2021-06-03T20:54:56 IST" duration-ms="12599" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchStartsWith -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:56 IST" name="afterEachMethod" finished-at="2021-06-03T20:54:58 IST" duration-ms="1697" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifySearchStartsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:58 IST" name="endTestCase" finished-at="2021-06-03T20:54:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifySearchStartsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:58 IST" name="startTestCase" finished-at="2021-06-03T20:54:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifySearchEndsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:54:58 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:55:03 IST" duration-ms="5162" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifySearchEndsWith()[pri:33, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:03 IST" name="VerifySearchEndsWith" finished-at="2021-06-03T20:55:14 IST" duration-ms="10382" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchEndsWith -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:14 IST" name="afterEachMethod" finished-at="2021-06-03T20:55:15 IST" duration-ms="1685" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifySearchEndsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:15 IST" name="endTestCase" finished-at="2021-06-03T20:55:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifySearchEndsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:15 IST" name="startTestCase" finished-at="2021-06-03T20:55:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:15 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:55:21 IST" duration-ms="5601" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="searchPage()[pri:34, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:21 IST" name="searchPage" finished-at="2021-06-03T20:55:26 IST" duration-ms="5331" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:26 IST" name="afterEachMethod" finished-at="2021-06-03T20:55:28 IST" duration-ms="1605" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:28 IST" name="endTestCase" finished-at="2021-06-03T20:55:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:28 IST" name="startTestCase" finished-at="2021-06-03T20:55:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:28 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:55:33 IST" duration-ms="5337" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="ExportToExcel()[pri:35, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:33 IST" name="ExportToExcel" finished-at="2021-06-03T20:55:37 IST" duration-ms="3590" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExportToExcel -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:37 IST" name="afterEachMethod" finished-at="2021-06-03T20:55:39 IST" duration-ms="1770" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:39 IST" name="endTestCase" finished-at="2021-06-03T20:55:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:39 IST" name="startTestCase" finished-at="2021-06-03T20:55:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:39 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:55:43 IST" duration-ms="4671" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="ExportToExcelData()[pri:36, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:43 IST" name="ExportToExcelData" finished-at="2021-06-03T20:55:46 IST" depends-on-methods="com.tetherfi.test.ExportSchedulerTest.ExportToExcel" duration-ms="2335" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at com.tetherfi.test.ExportSchedulerTest.ExportToExcelData(ExportSchedulerTest.java:398)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExportToExcelData -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:46 IST" name="afterEachMethod" finished-at="2021-06-03T20:55:47 IST" duration-ms="1651" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:47 IST" name="endTestCase" finished-at="2021-06-03T20:55:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:47 IST" name="startTestCase" finished-at="2021-06-03T20:55:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.SortingByAscending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:47 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:55:53 IST" duration-ms="5947" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="SortingByAscending()[pri:37, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:53 IST" name="SortingByAscending" finished-at="2021-06-03T20:55:58 IST" duration-ms="4869" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at com.tetherfi.test.ExportSchedulerTest.SortingByAscending(ExportSchedulerTest.java:407)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SortingByAscending -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:55:58 IST" name="afterEachMethod" finished-at="2021-06-03T20:56:00 IST" duration-ms="1846" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.SortingByAscending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:00 IST" name="endTestCase" finished-at="2021-06-03T20:56:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.SortingByAscending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:00 IST" name="startTestCase" finished-at="2021-06-03T20:56:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.SortingByDescending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:00 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:56:05 IST" duration-ms="5391" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="SortingByDescending()[pri:38, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:05 IST" name="SortingByDescending" finished-at="2021-06-03T20:56:11 IST" duration-ms="5961" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at com.tetherfi.test.ExportSchedulerTest.SortingByDescending(ExportSchedulerTest.java:416)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SortingByDescending -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:11 IST" name="afterEachMethod" finished-at="2021-06-03T20:56:13 IST" duration-ms="1621" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.SortingByDescending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:13 IST" name="endTestCase" finished-at="2021-06-03T20:56:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.SortingByDescending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:13 IST" name="startTestCase" finished-at="2021-06-03T20:56:13 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.GroupBy()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:13 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:56:18 IST" duration-ms="5288" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="GroupBy()[pri:39, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:18 IST" name="GroupBy" finished-at="2021-06-03T20:56:23 IST" duration-ms="5081" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GroupBy -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:23 IST" name="afterEachMethod" finished-at="2021-06-03T20:56:25 IST" duration-ms="1666" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.GroupBy()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:25 IST" name="endTestCase" finished-at="2021-06-03T20:56:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.GroupBy()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:25 IST" name="startTestCase" finished-at="2021-06-03T20:56:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyArrowMoveForPreviousAndNextPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:25 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:56:30 IST" duration-ms="5298" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifyArrowMoveForPreviousAndNextPage()[pri:40, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:30 IST" name="VerifyArrowMoveForPreviousAndNextPage" finished-at="2021-06-03T20:56:30 IST" duration-ms="55" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyArrowMoveForPreviousAndNextPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:30 IST" name="afterEachMethod" finished-at="2021-06-03T20:56:32 IST" duration-ms="1712" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyArrowMoveForPreviousAndNextPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:32 IST" name="endTestCase" finished-at="2021-06-03T20:56:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyArrowMoveForPreviousAndNextPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:32 IST" name="startTestCase" finished-at="2021-06-03T20:56:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyArrowMoveForFirstAndLastPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:32 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:56:36 IST" duration-ms="4436" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifyArrowMoveForFirstAndLastPage()[pri:41, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:36 IST" name="VerifyArrowMoveForFirstAndLastPage" finished-at="2021-06-03T20:56:37 IST" duration-ms="55" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyArrowMoveForFirstAndLastPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:37 IST" name="afterEachMethod" finished-at="2021-06-03T20:56:38 IST" duration-ms="1748" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyArrowMoveForFirstAndLastPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:38 IST" name="endTestCase" finished-at="2021-06-03T20:56:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyArrowMoveForFirstAndLastPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:38 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:56:43 IST" duration-ms="4652" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:38 IST" name="startTestCase" finished-at="2021-06-03T20:56:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyTotalNumberOfItemsPerPageDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyTotalNumberOfItemsPerPageDetails()[pri:42, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:43 IST" name="VerifyTotalNumberOfItemsPerPageDetails" finished-at="2021-06-03T20:56:43 IST" duration-ms="74" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyTotalNumberOfItemsPerPageDetails -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:43 IST" name="afterEachMethod" finished-at="2021-06-03T20:56:45 IST" duration-ms="1746" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyTotalNumberOfItemsPerPageDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:45 IST" name="endTestCase" finished-at="2021-06-03T20:56:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyTotalNumberOfItemsPerPageDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:45 IST" name="startTestCase" finished-at="2021-06-03T20:56:45 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyNumberOfItemsPerPageSelection()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:45 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:56:49 IST" duration-ms="4357" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifyNumberOfItemsPerPageSelection()[pri:43, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:49 IST" name="VerifyNumberOfItemsPerPageSelection" finished-at="2021-06-03T20:56:55 IST" duration-ms="5561" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[item per page assertion failed did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: item per page assertion failed did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at com.tetherfi.test.ExportSchedulerTest.VerifyNumberOfItemsPerPageSelection(ExportSchedulerTest.java:449)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyNumberOfItemsPerPageSelection -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:55 IST" name="afterEachMethod" finished-at="2021-06-03T20:56:56 IST" duration-ms="1528" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyNumberOfItemsPerPageSelection()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:56 IST" name="endTestCase" finished-at="2021-06-03T20:56:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyNumberOfItemsPerPageSelection()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:56 IST" name="startTestCase" finished-at="2021-06-03T20:56:56 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.searchwithoutSearchTextbox() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:56:56 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:57:01 IST" duration-ms="4640" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="searchwithoutSearchTextbox()[pri:44, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:57:01 IST" name="searchwithoutSearchTextbox" finished-at="2021-06-03T20:57:04 IST" duration-ms="3151" status="FAIL">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:64705}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 2d6dad78764ae9b67871a11c85455999]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:64705}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 2d6dad78764ae9b67871a11c85455999
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
at org.openqa.selenium.remote.RemoteWebElement.isDisplayed(RemoteWebElement.java:326)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
at com.tetherfi.pages.BasePage.waitUntilWebElementListIsVisible(BasePage.java:136)
at com.tetherfi.pages.BasePage.selectDropdownFromVisibleText(BasePage.java:341)
at com.tetherfi.pages.ExportSchedulerPage.searchwithoutextsearch(ExportSchedulerPage.java:589)
at com.tetherfi.test.ExportSchedulerTest.searchwithoutSearchTextbox(ExportSchedulerTest.java:455)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchwithoutSearchTextbox -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:57:04 IST" name="afterEachMethod" finished-at="2021-06-03T20:57:06 IST" duration-ms="1650" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.searchwithoutSearchTextbox() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:57:06 IST" name="endTestCase" finished-at="2021-06-03T20:57:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.searchwithoutSearchTextbox() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:57:06 IST" name="startTestCase" finished-at="2021-06-03T20:57:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DeleteWithoutDeleteReasonRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:57:06 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:57:11 IST" duration-ms="5151" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="DeleteWithoutDeleteReasonRecord()[pri:45, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:57:11 IST" name="DeleteWithoutDeleteReasonRecord" finished-at="2021-06-03T20:57:22 IST" duration-ms="11211" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteWithoutDeleteReasonRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:57:22 IST" name="afterEachMethod" finished-at="2021-06-03T20:57:24 IST" duration-ms="1631" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DeleteWithoutDeleteReasonRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:57:24 IST" name="endTestCase" finished-at="2021-06-03T20:57:24 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DeleteWithoutDeleteReasonRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:57:24 IST" name="startTestCase" finished-at="2021-06-03T20:57:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyCancelBtnAtDeleteExportSchedulerRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:57:24 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:57:29 IST" duration-ms="4875" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifyCancelBtnAtDeleteExportSchedulerRecord()[pri:46, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:57:29 IST" name="VerifyCancelBtnAtDeleteExportSchedulerRecord" finished-at="2021-06-03T20:58:00 IST" duration-ms="31099" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyCancelBtnAtDeleteExportSchedulerRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:58:00 IST" name="afterEachMethod" finished-at="2021-06-03T20:58:01 IST" duration-ms="1739" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyCancelBtnAtDeleteExportSchedulerRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:58:01 IST" name="endTestCase" finished-at="2021-06-03T20:58:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyCancelBtnAtDeleteExportSchedulerRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:58:01 IST" name="startTestCase" finished-at="2021-06-03T20:58:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DeleteRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:58:01 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:58:07 IST" duration-ms="5288" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="DeleteRecord()[pri:47, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:58:07 IST" name="DeleteRecord" finished-at="2021-06-03T20:58:19 IST" duration-ms="12059" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:58:19 IST" name="afterEachMethod" finished-at="2021-06-03T20:58:20 IST" duration-ms="1506" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DeleteRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:58:20 IST" name="endTestCase" finished-at="2021-06-03T20:58:20 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DeleteRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:58:20 IST" name="startTestCase" finished-at="2021-06-03T20:58:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:58:20 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:58:26 IST" duration-ms="5315" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="VerifyAuditTrialReportForDelete()[pri:48, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:58:26 IST" name="VerifyAuditTrialReportForDelete" finished-at="2021-06-03T20:58:59 IST" duration-ms="33885" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForDelete(ExportSchedulerTest.java:504)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForDelete -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:58:59 IST" name="afterEachMethod" finished-at="2021-06-03T20:59:01 IST" duration-ms="1536" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:01 IST" name="endTestCase" finished-at="2021-06-03T20:59:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.VerifyAuditTrialReportForDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:01 IST" name="startTestCase" finished-at="2021-06-03T20:59:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:01 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:59:07 IST" duration-ms="5715" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="SearchClearSearch()[pri:49, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:07 IST" name="SearchClearSearch" finished-at="2021-06-03T20:59:14 IST" duration-ms="6888" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchClearSearch -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:14 IST" name="afterEachMethod" finished-at="2021-06-03T20:59:15 IST" duration-ms="1545" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:15 IST" name="endTestCase" finished-at="2021-06-03T20:59:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:15 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:59:21 IST" duration-ms="5355" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:15 IST" name="startTestCase" finished-at="2021-06-03T20:59:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.ExporttoExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="ExporttoExcelWithoutData()[pri:50, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:21 IST" name="ExporttoExcelWithoutData" finished-at="2021-06-03T20:59:29 IST" duration-ms="8953" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExporttoExcelWithoutData -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:29 IST" name="afterEachMethod" finished-at="2021-06-03T20:59:31 IST" duration-ms="1741" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.ExporttoExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:31 IST" name="endTestCase" finished-at="2021-06-03T20:59:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.ExporttoExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:31 IST" name="startTestCase" finished-at="2021-06-03T20:59:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.database() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:31 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:59:37 IST" duration-ms="5411" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="database()[pri:51, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:37 IST" name="database" finished-at="2021-06-03T20:59:44 IST" duration-ms="7204" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at com.tetherfi.test.ExportSchedulerTest.database(ExportSchedulerTest.java:534)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- database -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:44 IST" name="afterEachMethod" finished-at="2021-06-03T20:59:45 IST" duration-ms="1581" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.database() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:45 IST" name="endTestCase" finished-at="2021-06-03T20:59:45 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.database() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:45 IST" name="startTestCase" finished-at="2021-06-03T20:59:45 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DeleteWeeklyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:45 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T20:59:53 IST" duration-ms="7797" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="DeleteWeeklyRecord()[pri:52, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T20:59:53 IST" name="DeleteWeeklyRecord" finished-at="2021-06-03T21:00:04 IST" duration-ms="11198" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteWeeklyRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T21:00:04 IST" name="afterEachMethod" finished-at="2021-06-03T21:00:06 IST" duration-ms="1722" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DeleteWeeklyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T21:00:06 IST" name="endTestCase" finished-at="2021-06-03T21:00:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DeleteWeeklyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T21:00:06 IST" name="startTestCase" finished-at="2021-06-03T21:00:06 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DeleteMonthlyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T21:00:06 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T21:00:12 IST" duration-ms="5839" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method signature="DeleteMonthlyRecord()[pri:53, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T21:00:12 IST" name="DeleteMonthlyRecord" finished-at="2021-06-03T21:00:24 IST" duration-ms="11898" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteMonthlyRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T21:00:24 IST" name="afterEachMethod" finished-at="2021-06-03T21:00:26 IST" duration-ms="1704" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DeleteMonthlyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T21:00:26 IST" name="endTestCase" finished-at="2021-06-03T21:00:26 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DeleteMonthlyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToExportSchedulerPage()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T21:00:26 IST" name="NavigateToExportSchedulerPage" finished-at="2021-06-03T21:00:31 IST" duration-ms="5205" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToExportSchedulerPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T21:00:26 IST" name="startTestCase" finished-at="2021-06-03T21:00:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DeleteCustomdailyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="DeleteCustomdailyRecord()[pri:54, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T21:00:31 IST" name="DeleteCustomdailyRecord" finished-at="2021-06-03T21:00:43 IST" duration-ms="11868" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteCustomdailyRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T21:00:43 IST" name="afterEachMethod" finished-at="2021-06-03T21:00:44 IST" duration-ms="1667" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DeleteCustomdailyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T21:00:44 IST" name="endTestCase" finished-at="2021-06-03T21:00:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.ExportSchedulerTest.DeleteCustomdailyRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.tetherfi.test.ExportSchedulerTest@4a9b92c6]" started-at="2021-06-03T21:00:44 IST" name="tearDown" finished-at="2021-06-03T21:00:48 IST" duration-ms="3491" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.tetherfi.test.ExportSchedulerTest -->
      <class name="com.tetherfi.test.tmac.TmacBroadCastMsgTest">
        <test-method is-config="true" signature="openApplication()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:00:48 IST" name="openApplication" finished-at="2021-06-03T21:01:14 IST" duration-ms="26263" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openApplication -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:01:14 IST" name="startTestCase" finished-at="2021-06-03T21:01:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.TmacBroadCastMsgPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:01:14 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:01:20 IST" duration-ms="5888" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="TmacBroadCastMsgPage()[pri:1, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:01:20 IST" name="TmacBroadCastMsgPage" finished-at="2021-06-03T21:01:21 IST" duration-ms="645" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- TmacBroadCastMsgPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:01:21 IST" name="afterEachMethod" finished-at="2021-06-03T21:01:22 IST" duration-ms="1735" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.TmacBroadCastMsgPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:01:22 IST" name="endTestCase" finished-at="2021-06-03T21:01:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.TmacBroadCastMsgPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:01:22 IST" name="startTestCase" finished-at="2021-06-03T21:01:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddNewTmacBroadCastMsgCancel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:01:22 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:01:28 IST" duration-ms="5768" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="AddNewTmacBroadCastMsgCancel()[pri:2, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:01:28 IST" name="AddNewTmacBroadCastMsgCancel" finished-at="2021-06-03T21:01:58 IST" duration-ms="29631" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddNewTmacBroadCastMsgCancel -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:01:58 IST" name="afterEachMethod" finished-at="2021-06-03T21:01:59 IST" duration-ms="1456" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddNewTmacBroadCastMsgCancel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:01:59 IST" name="endTestCase" finished-at="2021-06-03T21:01:59 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddNewTmacBroadCastMsgCancel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:01:59 IST" name="startTestCase" finished-at="2021-06-03T21:01:59 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddNewTmacBroadCastMsg() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:01:59 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:02:06 IST" duration-ms="6632" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="AddNewTmacBroadCastMsg()[pri:3, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:02:06 IST" name="AddNewTmacBroadCastMsg" finished-at="2021-06-03T21:02:35 IST" duration-ms="29076" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddNewTmacBroadCastMsg -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:02:35 IST" name="afterEachMethod" finished-at="2021-06-03T21:02:35 IST" duration-ms="525" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddNewTmacBroadCastMsg() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:02:35 IST" name="endTestCase" finished-at="2021-06-03T21:02:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddNewTmacBroadCastMsg() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:02:35 IST" name="startTestCase" finished-at="2021-06-03T21:02:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyAuditTrialReportForCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:02:35 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:02:43 IST" duration-ms="7751" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="VerifyAuditTrialReportForCreate()[pri:4, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:02:43 IST" name="VerifyAuditTrialReportForCreate" finished-at="2021-06-03T21:03:20 IST" depends-on-methods="com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddNewTmacBroadCastMsg" duration-ms="36820" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyAuditTrialReportForCreate(TmacBroadCastMsgTest.java:95)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForCreate -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:03:20 IST" name="afterEachMethod" finished-at="2021-06-03T21:03:22 IST" duration-ms="1748" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyAuditTrialReportForCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:03:22 IST" name="endTestCase" finished-at="2021-06-03T21:03:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyAuditTrialReportForCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:03:22 IST" name="startTestCase" finished-at="2021-06-03T21:03:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddDuplicateRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:03:22 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:03:28 IST" duration-ms="6200" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="AddDuplicateRecord()[pri:5, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:03:28 IST" name="AddDuplicateRecord" finished-at="2021-06-03T21:03:57 IST" duration-ms="28809" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddDuplicateRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:03:57 IST" name="afterEachMethod" finished-at="2021-06-03T21:03:59 IST" duration-ms="1823" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddDuplicateRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:03:59 IST" name="endTestCase" finished-at="2021-06-03T21:03:59 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddDuplicateRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:03:59 IST" name="startTestCase" finished-at="2021-06-03T21:03:59 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddRecordWithoutMesage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:03:59 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:04:04 IST" duration-ms="5221" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="AddRecordWithoutMesage()[pri:6, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:04:04 IST" name="AddRecordWithoutMesage" finished-at="2021-06-03T21:04:29 IST" duration-ms="25545" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutMesage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:04:29 IST" name="afterEachMethod" finished-at="2021-06-03T21:04:31 IST" duration-ms="1585" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddRecordWithoutMesage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:04:31 IST" name="endTestCase" finished-at="2021-06-03T21:04:31 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddRecordWithoutMesage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:04:31 IST" name="startTestCase" finished-at="2021-06-03T21:04:31 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddRecordwithoutStatus() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:04:31 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:04:37 IST" duration-ms="6001" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="AddRecordwithoutStatus()[pri:7, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:04:37 IST" name="AddRecordwithoutStatus" finished-at="2021-06-03T21:05:02 IST" duration-ms="24668" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordwithoutStatus -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:02 IST" name="afterEachMethod" finished-at="2021-06-03T21:05:03 IST" duration-ms="1623" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddRecordwithoutStatus() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:03 IST" name="endTestCase" finished-at="2021-06-03T21:05:03 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddRecordwithoutStatus() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:03 IST" name="startTestCase" finished-at="2021-06-03T21:05:03 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddRecordWithoutTeamName() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:03 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:05:10 IST" duration-ms="6523" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="AddRecordWithoutTeamName()[pri:8, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:10 IST" name="AddRecordWithoutTeamName" finished-at="2021-06-03T21:05:12 IST" duration-ms="1965" status="FAIL">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:49306}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 219e8291d98b91768442b17ae58e31f4]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:49306}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 219e8291d98b91768442b17ae58e31f4
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
at org.openqa.selenium.remote.RemoteWebElement.isDisplayed(RemoteWebElement.java:326)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
at com.tetherfi.pages.BasePage.waitUntilWebElementListIsVisible(BasePage.java:136)
at com.tetherfi.pages.BasePage.selectDropdownFromVisibleText(BasePage.java:341)
at com.tetherfi.pages.TmacBroadCastMsgPage.addInvalidRecord2(TmacBroadCastMsgPage.java:626)
at com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddRecordWithoutTeamName(TmacBroadCastMsgTest.java:133)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutTeamName -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:12 IST" name="afterEachMethod" finished-at="2021-06-03T21:05:14 IST" duration-ms="1803" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddRecordWithoutTeamName() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:14 IST" name="endTestCase" finished-at="2021-06-03T21:05:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.AddRecordWithoutTeamName() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:14 IST" name="startTestCase" finished-at="2021-06-03T21:05:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.EditTmacBroadCastMsgCancel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:14 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:05:18 IST" duration-ms="4886" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="EditTmacBroadCastMsgCancel()[pri:9, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:18 IST" name="EditTmacBroadCastMsgCancel" finished-at="2021-06-03T21:05:29 IST" duration-ms="10666" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditTmacBroadCastMsgCancel -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:29 IST" name="afterEachMethod" finished-at="2021-06-03T21:05:31 IST" duration-ms="1907" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.EditTmacBroadCastMsgCancel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:31 IST" name="endTestCase" finished-at="2021-06-03T21:05:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.EditTmacBroadCastMsgCancel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:31 IST" name="startTestCase" finished-at="2021-06-03T21:05:31 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.EditTmacBroadCastMsg() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:31 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:05:37 IST" duration-ms="5542" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="EditTmacBroadCastMsg()[pri:10, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:37 IST" name="EditTmacBroadCastMsg" finished-at="2021-06-03T21:05:49 IST" duration-ms="12303" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditTmacBroadCastMsg -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:49 IST" name="afterEachMethod" finished-at="2021-06-03T21:05:51 IST" duration-ms="1769" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.EditTmacBroadCastMsg() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:51 IST" name="endTestCase" finished-at="2021-06-03T21:05:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.EditTmacBroadCastMsg() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:51 IST" name="startTestCase" finished-at="2021-06-03T21:05:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyAuditTrailReportForUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:51 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:05:56 IST" duration-ms="5562" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="VerifyAuditTrailReportForUpdate()[pri:11, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:05:56 IST" name="VerifyAuditTrailReportForUpdate" finished-at="2021-06-03T21:06:28 IST" depends-on-methods="com.tetherfi.test.tmac.TmacBroadCastMsgTest.EditTmacBroadCastMsg" duration-ms="31955" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyAuditTrailReportForUpdate(TmacBroadCastMsgTest.java:166)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrailReportForUpdate -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:06:28 IST" name="afterEachMethod" finished-at="2021-06-03T21:06:30 IST" duration-ms="1683" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyAuditTrailReportForUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:06:30 IST" name="endTestCase" finished-at="2021-06-03T21:06:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyAuditTrailReportForUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:06:30 IST" name="startTestCase" finished-at="2021-06-03T21:06:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchIsNotEqualTo() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:06:30 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:06:36 IST" duration-ms="5787" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="VerifySearchIsNotEqualTo()[pri:12, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:06:36 IST" name="VerifySearchIsNotEqualTo" finished-at="2021-06-03T21:06:51 IST" duration-ms="15156" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchIsNotEqualTo -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:06:51 IST" name="afterEachMethod" finished-at="2021-06-03T21:06:53 IST" duration-ms="1856" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchIsNotEqualTo() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:06:53 IST" name="endTestCase" finished-at="2021-06-03T21:06:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchIsNotEqualTo() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:06:53 IST" name="startTestCase" finished-at="2021-06-03T21:06:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:06:53 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:06:58 IST" duration-ms="5245" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="VerifySearchContains()[pri:13, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:06:58 IST" name="VerifySearchContains" finished-at="2021-06-03T21:07:11 IST" duration-ms="12699" status="FAIL">
          <exception class="java.lang.ArrayIndexOutOfBoundsException">
            <message>
              <![CDATA[Index 1 out of bounds for length 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
at com.tetherfi.pages.TmacBroadCastMsgPage.gettable(TmacBroadCastMsgPage.java:706)
at com.tetherfi.pages.TmacBroadCastMsgPage.verifySearchContains(TmacBroadCastMsgPage.java:276)
at com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchContains(TmacBroadCastMsgTest.java:184)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.ArrayIndexOutOfBoundsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchContains -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:07:11 IST" name="afterEachMethod" finished-at="2021-06-03T21:07:12 IST" duration-ms="1600" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:07:12 IST" name="endTestCase" finished-at="2021-06-03T21:07:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:07:12 IST" name="startTestCase" finished-at="2021-06-03T21:07:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchDoesNotContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:07:12 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:07:18 IST" duration-ms="5700" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="VerifySearchDoesNotContains()[pri:14, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:07:18 IST" name="VerifySearchDoesNotContains" finished-at="2021-06-03T21:07:21 IST" duration-ms="2856" status="FAIL">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:49306}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 219e8291d98b91768442b17ae58e31f4]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:49306}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 219e8291d98b91768442b17ae58e31f4
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
at org.openqa.selenium.remote.RemoteWebElement.isDisplayed(RemoteWebElement.java:326)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
at com.tetherfi.pages.BasePage.waitUntilWebElementListIsVisible(BasePage.java:136)
at com.tetherfi.pages.BasePage.selectDropdownFromVisibleText(BasePage.java:341)
at com.tetherfi.pages.TmacBroadCastMsgPage.verifySearchDoesNotContains(TmacBroadCastMsgPage.java:293)
at com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchDoesNotContains(TmacBroadCastMsgTest.java:193)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchDoesNotContains -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:07:21 IST" name="afterEachMethod" finished-at="2021-06-03T21:07:22 IST" duration-ms="1656" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchDoesNotContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:07:22 IST" name="endTestCase" finished-at="2021-06-03T21:07:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchDoesNotContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:07:22 IST" name="startTestCase" finished-at="2021-06-03T21:07:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchStartsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:07:22 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:07:28 IST" duration-ms="5401" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="VerifySearchStartsWith()[pri:15, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:07:28 IST" name="VerifySearchStartsWith" finished-at="2021-06-03T21:07:40 IST" duration-ms="12476" status="FAIL">
          <exception class="java.lang.ArrayIndexOutOfBoundsException">
            <message>
              <![CDATA[Index 1 out of bounds for length 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
at com.tetherfi.pages.TmacBroadCastMsgPage.gettable(TmacBroadCastMsgPage.java:706)
at com.tetherfi.pages.TmacBroadCastMsgPage.verifySearchStartsWith(TmacBroadCastMsgPage.java:321)
at com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchStartsWith(TmacBroadCastMsgTest.java:202)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.ArrayIndexOutOfBoundsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchStartsWith -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:07:40 IST" name="afterEachMethod" finished-at="2021-06-03T21:07:42 IST" duration-ms="1686" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchStartsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:07:42 IST" name="endTestCase" finished-at="2021-06-03T21:07:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchStartsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:07:42 IST" name="startTestCase" finished-at="2021-06-03T21:07:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchEndsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:07:42 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:07:48 IST" duration-ms="5690" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="VerifySearchEndsWith()[pri:16, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:07:48 IST" name="VerifySearchEndsWith" finished-at="2021-06-03T21:08:01 IST" duration-ms="12770" status="FAIL">
          <exception class="java.lang.ArrayIndexOutOfBoundsException">
            <message>
              <![CDATA[Index 1 out of bounds for length 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
at com.tetherfi.pages.TmacBroadCastMsgPage.gettable(TmacBroadCastMsgPage.java:706)
at com.tetherfi.pages.TmacBroadCastMsgPage.verifySearchEndsWith(TmacBroadCastMsgPage.java:344)
at com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchEndsWith(TmacBroadCastMsgTest.java:211)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.ArrayIndexOutOfBoundsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchEndsWith -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:01 IST" name="afterEachMethod" finished-at="2021-06-03T21:08:02 IST" duration-ms="1718" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchEndsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:02 IST" name="endTestCase" finished-at="2021-06-03T21:08:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifySearchEndsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:02 IST" name="startTestCase" finished-at="2021-06-03T21:08:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:02 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:08:08 IST" duration-ms="6215" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="searchPage()[pri:17, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:08 IST" name="searchPage" finished-at="2021-06-03T21:08:15 IST" duration-ms="6142" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:15 IST" name="afterEachMethod" finished-at="2021-06-03T21:08:16 IST" duration-ms="1539" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:16 IST" name="endTestCase" finished-at="2021-06-03T21:08:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:16 IST" name="startTestCase" finished-at="2021-06-03T21:08:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:16 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:08:22 IST" duration-ms="5900" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="SearchClearSearch()[pri:18, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:22 IST" name="SearchClearSearch" finished-at="2021-06-03T21:08:30 IST" duration-ms="7812" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchClearSearch -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:30 IST" name="afterEachMethod" finished-at="2021-06-03T21:08:32 IST" duration-ms="1710" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:32 IST" name="endTestCase" finished-at="2021-06-03T21:08:32 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:32 IST" name="startTestCase" finished-at="2021-06-03T21:08:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:32 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:08:38 IST" duration-ms="6396" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="ExportToExcel()[pri:19, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:38 IST" name="ExportToExcel" finished-at="2021-06-03T21:08:40 IST" duration-ms="2039" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExportToExcel -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:40 IST" name="afterEachMethod" finished-at="2021-06-03T21:08:42 IST" duration-ms="1617" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:42 IST" name="endTestCase" finished-at="2021-06-03T21:08:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:42 IST" name="startTestCase" finished-at="2021-06-03T21:08:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:42 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:08:47 IST" duration-ms="5601" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="ExportToExcelData()[pri:20, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:47 IST" name="ExportToExcelData" finished-at="2021-06-03T21:08:48 IST" duration-ms="795" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExportToExcelData -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:48 IST" name="afterEachMethod" finished-at="2021-06-03T21:08:50 IST" duration-ms="1533" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:50 IST" name="endTestCase" finished-at="2021-06-03T21:08:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:50 IST" name="startTestCase" finished-at="2021-06-03T21:08:50 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.database() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:50 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:08:55 IST" duration-ms="5683" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="database()[pri:21, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:08:55 IST" name="database" finished-at="2021-06-03T21:09:07 IST" duration-ms="12205" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- database -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:07 IST" name="afterEachMethod" finished-at="2021-06-03T21:09:09 IST" duration-ms="1624" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.database() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:09 IST" name="endTestCase" finished-at="2021-06-03T21:09:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.database() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:09 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:09:15 IST" duration-ms="5865" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:09 IST" name="startTestCase" finished-at="2021-06-03T21:09:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.GroupBy()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="GroupBy()[pri:22, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:15 IST" name="GroupBy" finished-at="2021-06-03T21:09:20 IST" duration-ms="5042" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GroupBy -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:20 IST" name="afterEachMethod" finished-at="2021-06-03T21:09:21 IST" duration-ms="1355" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.GroupBy()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:21 IST" name="endTestCase" finished-at="2021-06-03T21:09:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.GroupBy()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:21 IST" name="startTestCase" finished-at="2021-06-03T21:09:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyArrowMoveForPreviousAndNextPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:21 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:09:27 IST" duration-ms="5571" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="VerifyArrowMoveForPreviousAndNextPage()[pri:23, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:27 IST" name="VerifyArrowMoveForPreviousAndNextPage" finished-at="2021-06-03T21:09:33 IST" duration-ms="6527" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[arrow move for previous and next page assertion failed did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: arrow move for previous and next page assertion failed did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyArrowMoveForPreviousAndNextPage(TmacBroadCastMsgTest.java:275)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyArrowMoveForPreviousAndNextPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:33 IST" name="afterEachMethod" finished-at="2021-06-03T21:09:35 IST" duration-ms="1412" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyArrowMoveForPreviousAndNextPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:35 IST" name="endTestCase" finished-at="2021-06-03T21:09:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyArrowMoveForPreviousAndNextPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:35 IST" name="startTestCase" finished-at="2021-06-03T21:09:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyArrowMoveForFirstAndLastPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:35 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:09:41 IST" duration-ms="6141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="VerifyArrowMoveForFirstAndLastPage()[pri:24, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:41 IST" name="VerifyArrowMoveForFirstAndLastPage" finished-at="2021-06-03T21:09:41 IST" duration-ms="58" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyArrowMoveForFirstAndLastPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:41 IST" name="afterEachMethod" finished-at="2021-06-03T21:09:43 IST" duration-ms="1648" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyArrowMoveForFirstAndLastPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:43 IST" name="endTestCase" finished-at="2021-06-03T21:09:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyArrowMoveForFirstAndLastPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:43 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:09:48 IST" duration-ms="4857" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:43 IST" name="startTestCase" finished-at="2021-06-03T21:09:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyTotalNumberOfItemsPerPageDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyTotalNumberOfItemsPerPageDetails()[pri:25, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:48 IST" name="VerifyTotalNumberOfItemsPerPageDetails" finished-at="2021-06-03T21:09:48 IST" duration-ms="74" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyTotalNumberOfItemsPerPageDetails -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:48 IST" name="afterEachMethod" finished-at="2021-06-03T21:09:49 IST" duration-ms="1483" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyTotalNumberOfItemsPerPageDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:49 IST" name="endTestCase" finished-at="2021-06-03T21:09:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyTotalNumberOfItemsPerPageDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:49 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:09:56 IST" duration-ms="6470" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:49 IST" name="startTestCase" finished-at="2021-06-03T21:09:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyNumberOfItemsPerPageSelection()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyNumberOfItemsPerPageSelection()[pri:26, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:56 IST" name="VerifyNumberOfItemsPerPageSelection" finished-at="2021-06-03T21:09:58 IST" duration-ms="2589" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[item per page assertion failed did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: item per page assertion failed did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyNumberOfItemsPerPageSelection(TmacBroadCastMsgTest.java:292)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyNumberOfItemsPerPageSelection -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:09:58 IST" name="afterEachMethod" finished-at="2021-06-03T21:10:00 IST" duration-ms="1702" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyNumberOfItemsPerPageSelection()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:00 IST" name="endTestCase" finished-at="2021-06-03T21:10:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyNumberOfItemsPerPageSelection()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:00 IST" name="startTestCase" finished-at="2021-06-03T21:10:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:00 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:10:05 IST" duration-ms="5356" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="VerifyDropdownForAllTheColumns()[pri:27, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:05 IST" name="VerifyDropdownForAllTheColumns" finished-at="2021-06-03T21:10:14 IST" duration-ms="8414" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyDropdownForAllTheColumns -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:14 IST" name="afterEachMethod" finished-at="2021-06-03T21:10:16 IST" duration-ms="1966" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:16 IST" name="endTestCase" finished-at="2021-06-03T21:10:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:16 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:10:21 IST" duration-ms="5440" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:16 IST" name="startTestCase" finished-at="2021-06-03T21:10:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyColumnsHeaderEnable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyColumnsHeaderEnable()[pri:28, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:21 IST" name="VerifyColumnsHeaderEnable" finished-at="2021-06-03T21:10:29 IST" duration-ms="7747" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyColumnsHeaderEnable -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:29 IST" name="afterEachMethod" finished-at="2021-06-03T21:10:31 IST" duration-ms="1639" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyColumnsHeaderEnable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:31 IST" name="endTestCase" finished-at="2021-06-03T21:10:31 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyColumnsHeaderEnable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:31 IST" name="startTestCase" finished-at="2021-06-03T21:10:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:31 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:10:36 IST" duration-ms="5416" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="VerifyColumnsHeaderDisable()[pri:29, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:36 IST" name="VerifyColumnsHeaderDisable" finished-at="2021-06-03T21:10:41 IST" duration-ms="5009" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyColumnsHeaderDisable -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:41 IST" name="afterEachMethod" finished-at="2021-06-03T21:10:43 IST" duration-ms="1657" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:43 IST" name="endTestCase" finished-at="2021-06-03T21:10:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:43 IST" name="startTestCase" finished-at="2021-06-03T21:10:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.SortingByAscending() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:43 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:10:49 IST" duration-ms="6441" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="SortingByAscending()[pri:30, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:49 IST" name="SortingByAscending" finished-at="2021-06-03T21:10:53 IST" duration-ms="4029" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SortingByAscending -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:53 IST" name="afterEachMethod" finished-at="2021-06-03T21:10:55 IST" duration-ms="1499" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.SortingByAscending() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:55 IST" name="endTestCase" finished-at="2021-06-03T21:10:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.SortingByAscending() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:55 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:11:01 IST" duration-ms="6434" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:10:55 IST" name="startTestCase" finished-at="2021-06-03T21:10:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.SortingByDescending() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="SortingByDescending()[pri:31, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:11:01 IST" name="SortingByDescending" finished-at="2021-06-03T21:11:06 IST" duration-ms="4516" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SortingByDescending -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:11:06 IST" name="afterEachMethod" finished-at="2021-06-03T21:11:07 IST" duration-ms="1829" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.SortingByDescending() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:11:07 IST" name="endTestCase" finished-at="2021-06-03T21:11:07 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.SortingByDescending() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:11:07 IST" name="startTestCase" finished-at="2021-06-03T21:11:07 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.ExporttoExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToTmacBroadcastMsgPage()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:11:07 IST" name="NavigateToTmacBroadcastMsgPage" finished-at="2021-06-03T21:11:14 IST" duration-ms="6347" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToTmacBroadcastMsgPage -->
        <test-method signature="ExporttoExcelWithoutData()[pri:32, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:11:14 IST" name="ExporttoExcelWithoutData" finished-at="2021-06-03T21:11:23 IST" duration-ms="8881" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExporttoExcelWithoutData -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:11:23 IST" name="afterEachMethod" finished-at="2021-06-03T21:11:24 IST" duration-ms="1647" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.ExporttoExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:11:24 IST" name="endTestCase" finished-at="2021-06-03T21:11:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.TmacBroadCastMsgTest.ExporttoExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="Afterclass()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:11:24 IST" name="Afterclass" finished-at="2021-06-03T21:12:41 IST" duration-ms="76963" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: .k-grid-CustomDelete' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: .k-grid-CustomDelete' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:95)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:272)
at com.tetherfi.pages.BasePage.waitUntilWebElementIsVisible(BasePage.java:129)
at com.tetherfi.pages.BasePage.selectWebElement(BasePage.java:196)
at com.tetherfi.pages.AgentTeamManagementPage.deleteAgentTeamManagementRecord(AgentTeamManagementPage.java:514)
at com.tetherfi.test.tmac.TmacBroadCastMsgTest.Afterclass(TmacBroadCastMsgTest.java:362)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestMethodWorker.invokeAfterClassMethods(TestMethodWorker.java:217)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:130)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"css selector","selector":".k-grid-CustomDelete"}
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:49306}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 219e8291d98b91768442b17ae58e31f4
*** Element info: {Using=css selector, value=.k-grid-CustomDelete}
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
at org.openqa.selenium.remote.RemoteWebDriver.findElementByCssSelector(RemoteWebDriver.java:420)
at org.openqa.selenium.By$ByCssSelector.findElement(By.java:431)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:69)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at com.sun.proxy.$Proxy16.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
... 30 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Afterclass -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.tetherfi.test.tmac.TmacBroadCastMsgTest@6eed46e9]" started-at="2021-06-03T21:12:41 IST" name="tearDown" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622734961716" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.tetherfi.test.tmac.TmacBroadCastMsgTest -->
      <class name="com.tetherfi.test.tmac.AgentTeamMgmtTest">
        <test-method is-config="true" signature="openApplication()[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:32:34 IST" name="openApplication" finished-at="2021-06-03T20:32:56 IST" duration-ms="22136" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openApplication -->
        <test-method is-config="true" signature="NavigateToAgentTeamManagementPage()[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:32:56 IST" name="NavigateToAgentTeamManagementPage" finished-at="2021-06-03T20:33:02 IST" duration-ms="5879" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToAgentTeamManagementPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:02 IST" name="startTestCase" finished-at="2021-06-03T20:33:02 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AgentTeamManagementPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AgentTeamManagementPage()[pri:1, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:02 IST" name="AgentTeamManagementPage" finished-at="2021-06-03T20:33:03 IST" duration-ms="625" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AgentTeamManagementPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:03 IST" name="afterEachMethod" finished-at="2021-06-03T20:33:06 IST" duration-ms="2814" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AgentTeamManagementPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:06 IST" name="endTestCase" finished-at="2021-06-03T20:33:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AgentTeamManagementPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:06 IST" name="startTestCase" finished-at="2021-06-03T20:33:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddNewCountryRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddNewCountryRecord()[pri:2, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:06 IST" name="AddNewCountryRecord" finished-at="2021-06-03T20:33:15 IST" duration-ms="9454" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddNewCountryRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:15 IST" name="afterEachMethod" finished-at="2021-06-03T20:33:19 IST" duration-ms="3291" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddNewCountryRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:19 IST" name="endTestCase" finished-at="2021-06-03T20:33:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddNewCountryRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:19 IST" name="startTestCase" finished-at="2021-06-03T20:33:19 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddNewDivisionRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddNewDivisionRecord()[pri:3, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:19 IST" name="AddNewDivisionRecord" finished-at="2021-06-03T20:33:33 IST" duration-ms="14080" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddNewDivisionRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:33 IST" name="afterEachMethod" finished-at="2021-06-03T20:33:35 IST" duration-ms="2833" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddNewDivisionRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:35 IST" name="endTestCase" finished-at="2021-06-03T20:33:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddNewDivisionRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:35 IST" name="startTestCase" finished-at="2021-06-03T20:33:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddNewDepartmentRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddNewDepartmentRecord()[pri:4, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:35 IST" name="AddNewDepartmentRecord" finished-at="2021-06-03T20:33:50 IST" duration-ms="14873" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddNewDepartmentRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:50 IST" name="afterEachMethod" finished-at="2021-06-03T20:33:53 IST" duration-ms="2697" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddNewDepartmentRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:53 IST" name="endTestCase" finished-at="2021-06-03T20:33:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddNewDepartmentRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:53 IST" name="startTestCase" finished-at="2021-06-03T20:33:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddNewAgentTeamManagementCancelRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddNewAgentTeamManagementCancelRecord()[pri:5, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:33:53 IST" name="AddNewAgentTeamManagementCancelRecord" finished-at="2021-06-03T20:34:09 IST" duration-ms="15559" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddNewAgentTeamManagementCancelRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:34:09 IST" name="afterEachMethod" finished-at="2021-06-03T20:34:09 IST" duration-ms="275" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddNewAgentTeamManagementCancelRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:34:09 IST" name="endTestCase" finished-at="2021-06-03T20:34:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddNewAgentTeamManagementCancelRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:34:09 IST" name="startTestCase" finished-at="2021-06-03T20:34:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddNewAgentTeamManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddNewAgentTeamManagementRecord()[pri:6, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:34:09 IST" name="AddNewAgentTeamManagementRecord" finished-at="2021-06-03T20:35:16 IST" duration-ms="66719" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: span[aria-owns='LevelHierarchy_listbox']' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: span[aria-owns='LevelHierarchy_listbox']' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:95)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:272)
at com.tetherfi.pages.BasePage.waitUntilWebElementIsVisible(BasePage.java:129)
at com.tetherfi.pages.BasePage.selectWebElement(BasePage.java:196)
at com.tetherfi.pages.AgentTeamManagementPage.chooseLevel(AgentTeamManagementPage.java:329)
at com.tetherfi.pages.AgentTeamManagementPage.addNewAgentTeamManagementRecord(AgentTeamManagementPage.java:318)
at com.tetherfi.test.tmac.AgentTeamMgmtTest.AddNewAgentTeamManagementRecord(AgentTeamMgmtTest.java:99)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"css selector","selector":"span[aria-owns='LevelHierarchy_listbox']"}
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:52001}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 7b66352e6fd6a93912eda00d234d5ac1
*** Element info: {Using=css selector, value=span[aria-owns='LevelHierarchy_listbox']}
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
at org.openqa.selenium.remote.RemoteWebDriver.findElementByCssSelector(RemoteWebDriver.java:420)
at org.openqa.selenium.By$ByCssSelector.findElement(By.java:431)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:69)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at com.sun.proxy.$Proxy16.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
... 33 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddNewAgentTeamManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:35:16 IST" name="afterEachMethod" finished-at="2021-06-03T20:35:18 IST" duration-ms="2372" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddNewAgentTeamManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:35:18 IST" name="endTestCase" finished-at="2021-06-03T20:35:18 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddNewAgentTeamManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:35:18 IST" name="startTestCase" finished-at="2021-06-03T20:35:18 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddRecordTeamNameBlank() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddRecordTeamNameBlank()[pri:7, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:35:18 IST" name="AddRecordTeamNameBlank" finished-at="2021-06-03T20:35:34 IST" duration-ms="16172" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordTeamNameBlank -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:35:34 IST" name="afterEachMethod" finished-at="2021-06-03T20:35:37 IST" duration-ms="3069" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddRecordTeamNameBlank() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:35:37 IST" name="endTestCase" finished-at="2021-06-03T20:35:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddRecordTeamNameBlank() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:35:37 IST" name="startTestCase" finished-at="2021-06-03T20:35:37 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddRecordCountryBlank() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddRecordCountryBlank()[pri:8, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:35:37 IST" name="AddRecordCountryBlank" finished-at="2021-06-03T20:35:46 IST" duration-ms="8422" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordCountryBlank -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:35:46 IST" name="afterEachMethod" finished-at="2021-06-03T20:35:46 IST" duration-ms="258" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddRecordCountryBlank() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:35:46 IST" name="endTestCase" finished-at="2021-06-03T20:35:46 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddRecordCountryBlank() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:35:46 IST" name="startTestCase" finished-at="2021-06-03T20:35:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddRecordDivisionBlank() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddRecordDivisionBlank()[pri:9, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:35:46 IST" name="AddRecordDivisionBlank" finished-at="2021-06-03T20:36:02 IST" duration-ms="15915" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordDivisionBlank -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:36:02 IST" name="afterEachMethod" finished-at="2021-06-03T20:36:02 IST" duration-ms="287" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddRecordDivisionBlank() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:36:02 IST" name="endTestCase" finished-at="2021-06-03T20:36:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddRecordDivisionBlank() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method signature="AddRecordDepartmentBlank()[pri:10, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:36:02 IST" name="AddRecordDepartmentBlank" finished-at="2021-06-03T20:36:19 IST" duration-ms="17306" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordDepartmentBlank -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:36:02 IST" name="startTestCase" finished-at="2021-06-03T20:36:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddRecordDepartmentBlank() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:36:19 IST" name="afterEachMethod" finished-at="2021-06-03T20:36:22 IST" duration-ms="2744" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddRecordDepartmentBlank() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:36:22 IST" name="endTestCase" finished-at="2021-06-03T20:36:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddRecordDepartmentBlank() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:36:22 IST" name="startTestCase" finished-at="2021-06-03T20:36:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddDuplicateRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddDuplicateRecord()[pri:11, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:36:22 IST" name="AddDuplicateRecord" finished-at="2021-06-03T20:36:57 IST" duration-ms="34833" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at com.tetherfi.test.tmac.AgentTeamMgmtTest.AddDuplicateRecord(AgentTeamMgmtTest.java:148)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddDuplicateRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:36:57 IST" name="afterEachMethod" finished-at="2021-06-03T20:37:00 IST" duration-ms="2639" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddDuplicateRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:00 IST" name="endTestCase" finished-at="2021-06-03T20:37:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.AddDuplicateRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:00 IST" name="startTestCase" finished-at="2021-06-03T20:37:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.EditAgentTeamManagementCancelRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="EditAgentTeamManagementCancelRecord()[pri:12, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:00 IST" name="EditAgentTeamManagementCancelRecord" finished-at="2021-06-03T20:37:08 IST" duration-ms="8513" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditAgentTeamManagementCancelRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:08 IST" name="afterEachMethod" finished-at="2021-06-03T20:37:11 IST" duration-ms="2299" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.EditAgentTeamManagementCancelRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:11 IST" name="endTestCase" finished-at="2021-06-03T20:37:11 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.EditAgentTeamManagementCancelRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:11 IST" name="startTestCase" finished-at="2021-06-03T20:37:11 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.EditAgentTeamManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="EditAgentTeamManagementRecord()[pri:13, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:11 IST" name="EditAgentTeamManagementRecord" finished-at="2021-06-03T20:37:19 IST" duration-ms="8173" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditAgentTeamManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:19 IST" name="afterEachMethod" finished-at="2021-06-03T20:37:21 IST" duration-ms="2705" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.EditAgentTeamManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:21 IST" name="endTestCase" finished-at="2021-06-03T20:37:21 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.EditAgentTeamManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method signature="searchPage()[pri:14, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:21 IST" name="searchPage" finished-at="2021-06-03T20:37:30 IST" duration-ms="8435" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:21 IST" name="startTestCase" finished-at="2021-06-03T20:37:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:30 IST" name="afterEachMethod" finished-at="2021-06-03T20:37:32 IST" duration-ms="2532" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:32 IST" name="endTestCase" finished-at="2021-06-03T20:37:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method signature="VerifySearchIsNotEqualTo()[pri:15, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:32 IST" name="VerifySearchIsNotEqualTo" finished-at="2021-06-03T20:37:44 IST" duration-ms="11111" status="FAIL">
          <exception class="java.lang.StringIndexOutOfBoundsException">
            <message>
              <![CDATA[begin 11, end 0, length 0]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.StringIndexOutOfBoundsException: begin 11, end 0, length 0
at java.base/java.lang.String.checkBoundsBeginEnd(String.java:3756)
at java.base/java.lang.String.substring(String.java:1902)
at java.base/java.lang.String.substring(String.java:1875)
at com.tetherfi.pages.AgentTeamManagementPage.gettable(AgentTeamManagementPage.java:718)
at com.tetherfi.pages.AgentTeamManagementPage.verifySearchIsNotEqualTo(AgentTeamManagementPage.java:373)
at com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchIsNotEqualTo(AgentTeamMgmtTest.java:188)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.StringIndexOutOfBoundsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchIsNotEqualTo -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:32 IST" name="startTestCase" finished-at="2021-06-03T20:37:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchIsNotEqualTo() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:44 IST" name="afterEachMethod" finished-at="2021-06-03T20:37:49 IST" duration-ms="5498" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchIsNotEqualTo() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:49 IST" name="endTestCase" finished-at="2021-06-03T20:37:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchIsNotEqualTo() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:49 IST" name="startTestCase" finished-at="2021-06-03T20:37:49 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifySearchContains()[pri:16, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:49 IST" name="VerifySearchContains" finished-at="2021-06-03T20:37:59 IST" duration-ms="9767" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchContains -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:37:59 IST" name="afterEachMethod" finished-at="2021-06-03T20:38:01 IST" duration-ms="2689" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:01 IST" name="endTestCase" finished-at="2021-06-03T20:38:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:01 IST" name="startTestCase" finished-at="2021-06-03T20:38:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchDoesNotContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifySearchDoesNotContains()[pri:17, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:01 IST" name="VerifySearchDoesNotContains" finished-at="2021-06-03T20:38:14 IST" duration-ms="12234" status="FAIL">
          <exception class="java.lang.StringIndexOutOfBoundsException">
            <message>
              <![CDATA[begin 11, end 0, length 0]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.StringIndexOutOfBoundsException: begin 11, end 0, length 0
at java.base/java.lang.String.checkBoundsBeginEnd(String.java:3756)
at java.base/java.lang.String.substring(String.java:1902)
at java.base/java.lang.String.substring(String.java:1875)
at com.tetherfi.pages.AgentTeamManagementPage.gettable(AgentTeamManagementPage.java:718)
at com.tetherfi.pages.AgentTeamManagementPage.verifySearchDoesNotContains(AgentTeamManagementPage.java:417)
at com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchDoesNotContains(AgentTeamMgmtTest.java:206)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.StringIndexOutOfBoundsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchDoesNotContains -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:14 IST" name="afterEachMethod" finished-at="2021-06-03T20:38:16 IST" duration-ms="2638" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchDoesNotContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:16 IST" name="endTestCase" finished-at="2021-06-03T20:38:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchDoesNotContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:16 IST" name="startTestCase" finished-at="2021-06-03T20:38:16 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchStartsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifySearchStartsWith()[pri:18, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:16 IST" name="VerifySearchStartsWith" finished-at="2021-06-03T20:38:26 IST" duration-ms="9946" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchStartsWith -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:26 IST" name="afterEachMethod" finished-at="2021-06-03T20:38:29 IST" duration-ms="2955" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchStartsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:29 IST" name="endTestCase" finished-at="2021-06-03T20:38:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchStartsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method signature="VerifySearchEndsWith()[pri:19, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:29 IST" name="VerifySearchEndsWith" finished-at="2021-06-03T20:38:40 IST" duration-ms="10317" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchEndsWith -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:29 IST" name="startTestCase" finished-at="2021-06-03T20:38:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchEndsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:40 IST" name="afterEachMethod" finished-at="2021-06-03T20:38:42 IST" duration-ms="2564" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchEndsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:42 IST" name="endTestCase" finished-at="2021-06-03T20:38:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifySearchEndsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:42 IST" name="startTestCase" finished-at="2021-06-03T20:38:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.DeleteAgentTeamManagementCancelRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="DeleteAgentTeamManagementCancelRecord()[pri:20, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:42 IST" name="DeleteAgentTeamManagementCancelRecord" finished-at="2021-06-03T20:38:52 IST" duration-ms="10232" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteAgentTeamManagementCancelRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:52 IST" name="afterEachMethod" finished-at="2021-06-03T20:38:55 IST" duration-ms="2854" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.DeleteAgentTeamManagementCancelRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:55 IST" name="endTestCase" finished-at="2021-06-03T20:38:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.DeleteAgentTeamManagementCancelRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:55 IST" name="startTestCase" finished-at="2021-06-03T20:38:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.DeleteAgentTeamManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="DeleteAgentTeamManagementRecord()[pri:21, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:38:55 IST" name="DeleteAgentTeamManagementRecord" finished-at="2021-06-03T20:39:09 IST" duration-ms="14070" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteAgentTeamManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:09 IST" name="afterEachMethod" finished-at="2021-06-03T20:39:10 IST" duration-ms="410" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.DeleteAgentTeamManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:10 IST" name="endTestCase" finished-at="2021-06-03T20:39:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.DeleteAgentTeamManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method signature="SearchClearSearch()[pri:22, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:10 IST" name="SearchClearSearch" finished-at="2021-06-03T20:39:19 IST" duration-ms="8895" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchClearSearch -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:10 IST" name="startTestCase" finished-at="2021-06-03T20:39:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:19 IST" name="afterEachMethod" finished-at="2021-06-03T20:39:22 IST" duration-ms="3368" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:22 IST" name="endTestCase" finished-at="2021-06-03T20:39:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:22 IST" name="startTestCase" finished-at="2021-06-03T20:39:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="ExportToExcel()[pri:23, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:22 IST" name="ExportToExcel" finished-at="2021-06-03T20:39:26 IST" duration-ms="3688" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExportToExcel -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:26 IST" name="afterEachMethod" finished-at="2021-06-03T20:39:28 IST" duration-ms="2620" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:28 IST" name="endTestCase" finished-at="2021-06-03T20:39:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method signature="ExportToExcelData()[pri:24, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:28 IST" name="ExportToExcelData" finished-at="2021-06-03T20:39:28 IST" duration-ms="190" status="FAIL">
          <exception class="java.lang.ArrayIndexOutOfBoundsException">
            <message>
              <![CDATA[Index 1 out of bounds for length 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
at com.tetherfi.pages.AgentTeamManagementPage.getdata(AgentTeamManagementPage.java:734)
at com.tetherfi.pages.AgentTeamManagementPage.verifyexportToExcelSheet(AgentTeamManagementPage.java:780)
at com.tetherfi.test.tmac.AgentTeamMgmtTest.ExportToExcelData(AgentTeamMgmtTest.java:270)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.ArrayIndexOutOfBoundsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExportToExcelData -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:28 IST" name="startTestCase" finished-at="2021-06-03T20:39:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:29 IST" name="afterEachMethod" finished-at="2021-06-03T20:39:31 IST" duration-ms="2554" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:31 IST" name="endTestCase" finished-at="2021-06-03T20:39:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:31 IST" name="startTestCase" finished-at="2021-06-03T20:39:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.database() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="database()[pri:25, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:31 IST" name="database" finished-at="2021-06-03T20:39:39 IST" duration-ms="7690" status="FAIL">
          <exception class="java.lang.StringIndexOutOfBoundsException">
            <message>
              <![CDATA[begin 11, end 0, length 0]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.StringIndexOutOfBoundsException: begin 11, end 0, length 0
at java.base/java.lang.String.checkBoundsBeginEnd(String.java:3756)
at java.base/java.lang.String.substring(String.java:1902)
at java.base/java.lang.String.substring(String.java:1875)
at com.tetherfi.pages.AgentTeamManagementPage.gettable(AgentTeamManagementPage.java:718)
at com.tetherfi.pages.AgentTeamManagementPage.verifyDatabase(AgentTeamManagementPage.java:694)
at com.tetherfi.test.tmac.AgentTeamMgmtTest.database(AgentTeamMgmtTest.java:280)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.StringIndexOutOfBoundsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- database -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:39 IST" name="afterEachMethod" finished-at="2021-06-03T20:39:41 IST" duration-ms="2182" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.database() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:41 IST" name="endTestCase" finished-at="2021-06-03T20:39:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.database() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:41 IST" name="startTestCase" finished-at="2021-06-03T20:39:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.GroupBy()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="GroupBy()[pri:26, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:41 IST" name="GroupBy" finished-at="2021-06-03T20:39:44 IST" duration-ms="2901" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GroupBy -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:44 IST" name="afterEachMethod" finished-at="2021-06-03T20:39:47 IST" duration-ms="3139" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.GroupBy()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:47 IST" name="endTestCase" finished-at="2021-06-03T20:39:47 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.GroupBy()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:47 IST" name="startTestCase" finished-at="2021-06-03T20:39:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyArrowMoveForPreviousAndNextPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyArrowMoveForPreviousAndNextPage()[pri:27, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:47 IST" name="VerifyArrowMoveForPreviousAndNextPage" finished-at="2021-06-03T20:39:54 IST" duration-ms="7167" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyArrowMoveForPreviousAndNextPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:54 IST" name="afterEachMethod" finished-at="2021-06-03T20:39:57 IST" duration-ms="2988" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyArrowMoveForPreviousAndNextPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:57 IST" name="endTestCase" finished-at="2021-06-03T20:39:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyArrowMoveForPreviousAndNextPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method signature="VerifyArrowMoveForFirstAndLastPage()[pri:28, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:57 IST" name="VerifyArrowMoveForFirstAndLastPage" finished-at="2021-06-03T20:40:04 IST" duration-ms="7278" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyArrowMoveForFirstAndLastPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:39:57 IST" name="startTestCase" finished-at="2021-06-03T20:39:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyArrowMoveForFirstAndLastPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:04 IST" name="afterEachMethod" finished-at="2021-06-03T20:40:07 IST" duration-ms="2766" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyArrowMoveForFirstAndLastPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:07 IST" name="endTestCase" finished-at="2021-06-03T20:40:07 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyArrowMoveForFirstAndLastPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:07 IST" name="startTestCase" finished-at="2021-06-03T20:40:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyTotalNumberOfItemsPerPageDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyTotalNumberOfItemsPerPageDetails()[pri:29, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:07 IST" name="VerifyTotalNumberOfItemsPerPageDetails" finished-at="2021-06-03T20:40:07 IST" duration-ms="48" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[item per page assertion failed did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: item per page assertion failed did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyTotalNumberOfItemsPerPageDetails(AgentTeamMgmtTest.java:306)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyTotalNumberOfItemsPerPageDetails -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:07 IST" name="afterEachMethod" finished-at="2021-06-03T20:40:10 IST" duration-ms="3134" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyTotalNumberOfItemsPerPageDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:10 IST" name="endTestCase" finished-at="2021-06-03T20:40:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyTotalNumberOfItemsPerPageDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:10 IST" name="startTestCase" finished-at="2021-06-03T20:40:10 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyNumberOfItemsPerPageSelection()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyNumberOfItemsPerPageSelection()[pri:30, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:10 IST" name="VerifyNumberOfItemsPerPageSelection" finished-at="2021-06-03T20:40:22 IST" duration-ms="11476" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyNumberOfItemsPerPageSelection -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:22 IST" name="afterEachMethod" finished-at="2021-06-03T20:40:24 IST" duration-ms="2251" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyNumberOfItemsPerPageSelection()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:24 IST" name="endTestCase" finished-at="2021-06-03T20:40:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyNumberOfItemsPerPageSelection()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:24 IST" name="startTestCase" finished-at="2021-06-03T20:40:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyDropdownForAllTheColumns()[pri:31, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:24 IST" name="VerifyDropdownForAllTheColumns" finished-at="2021-06-03T20:40:38 IST" duration-ms="13414" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyDropdownForAllTheColumns -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:38 IST" name="afterEachMethod" finished-at="2021-06-03T20:40:41 IST" duration-ms="3005" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:41 IST" name="endTestCase" finished-at="2021-06-03T20:40:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:41 IST" name="startTestCase" finished-at="2021-06-03T20:40:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyColumnsHeaderDisable()[pri:32, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:41 IST" name="VerifyColumnsHeaderDisable" finished-at="2021-06-03T20:40:50 IST" duration-ms="9634" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyColumnsHeaderDisable -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:50 IST" name="afterEachMethod" finished-at="2021-06-03T20:40:53 IST" duration-ms="2454" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:53 IST" name="endTestCase" finished-at="2021-06-03T20:40:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:53 IST" name="startTestCase" finished-at="2021-06-03T20:40:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyColumnsHeaderEnable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyColumnsHeaderEnable()[pri:32, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:40:53 IST" name="VerifyColumnsHeaderEnable" finished-at="2021-06-03T20:41:00 IST" duration-ms="7688" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyColumnsHeaderEnable -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:41:00 IST" name="afterEachMethod" finished-at="2021-06-03T20:41:04 IST" duration-ms="3459" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyColumnsHeaderEnable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:41:04 IST" name="endTestCase" finished-at="2021-06-03T20:41:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyColumnsHeaderEnable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:41:04 IST" name="startTestCase" finished-at="2021-06-03T20:41:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.SortingByAscending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="SortingByAscending()[pri:33, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:41:04 IST" name="SortingByAscending" finished-at="2021-06-03T20:41:11 IST" duration-ms="7109" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SortingByAscending -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:41:11 IST" name="afterEachMethod" finished-at="2021-06-03T20:41:14 IST" duration-ms="2995" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.SortingByAscending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:41:14 IST" name="endTestCase" finished-at="2021-06-03T20:41:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.SortingByAscending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:41:14 IST" name="startTestCase" finished-at="2021-06-03T20:41:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.SortingByDescending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="SortingByDescending()[pri:35, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:41:14 IST" name="SortingByDescending" finished-at="2021-06-03T20:41:20 IST" duration-ms="6355" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SortingByDescending -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:41:20 IST" name="afterEachMethod" finished-at="2021-06-03T20:41:23 IST" duration-ms="2761" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.SortingByDescending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:41:23 IST" name="endTestCase" finished-at="2021-06-03T20:41:23 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.SortingByDescending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:41:23 IST" name="startTestCase" finished-at="2021-06-03T20:41:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.ExporttoExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="ExporttoExcelWithoutData()[pri:36, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:41:23 IST" name="ExporttoExcelWithoutData" finished-at="2021-06-03T20:41:32 IST" duration-ms="8656" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExporttoExcelWithoutData -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:41:32 IST" name="afterEachMethod" finished-at="2021-06-03T20:41:34 IST" duration-ms="2685" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.ExporttoExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:41:34 IST" name="endTestCase" finished-at="2021-06-03T20:41:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.ExporttoExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:41:34 IST" name="startTestCase" finished-at="2021-06-03T20:41:34 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyAuditTrialReportForCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyAuditTrialReportForCreate()[pri:37, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:41:34 IST" name="VerifyAuditTrialReportForCreate" finished-at="2021-06-03T20:42:10 IST" duration-ms="35960" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForCreate -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:42:10 IST" name="afterEachMethod" finished-at="2021-06-03T20:42:12 IST" duration-ms="1770" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyAuditTrialReportForCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:42:12 IST" name="endTestCase" finished-at="2021-06-03T20:42:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyAuditTrialReportForCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:42:12 IST" name="startTestCase" finished-at="2021-06-03T20:42:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyAuditTrialReportForUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyAuditTrialReportForUpdate()[pri:38, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:42:12 IST" name="VerifyAuditTrialReportForUpdate" finished-at="2021-06-03T20:42:46 IST" duration-ms="34238" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForUpdate -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:42:46 IST" name="afterEachMethod" finished-at="2021-06-03T20:42:48 IST" duration-ms="1601" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyAuditTrialReportForUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:42:48 IST" name="endTestCase" finished-at="2021-06-03T20:42:48 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyAuditTrialReportForUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:42:48 IST" name="startTestCase" finished-at="2021-06-03T20:42:48 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyAuditTrialReportForDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyAuditTrialReportForDelete()[pri:39, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:42:48 IST" name="VerifyAuditTrialReportForDelete" finished-at="2021-06-03T20:43:21 IST" duration-ms="32638" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForDelete -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:43:21 IST" name="afterEachMethod" finished-at="2021-06-03T20:43:22 IST" duration-ms="1643" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyAuditTrialReportForDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:43:22 IST" name="endTestCase" finished-at="2021-06-03T20:43:22 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.tmac.AgentTeamMgmtTest.VerifyAuditTrialReportForDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.tetherfi.test.tmac.AgentTeamMgmtTest@6ce9771c]" started-at="2021-06-03T20:43:22 IST" name="tearDown" finished-at="2021-06-03T20:43:26 IST" duration-ms="3334" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.tetherfi.test.tmac.AgentTeamMgmtTest -->
      <class name="com.tetherfi.test.RoleBasedAccessManagementCreateTest">
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:20:35 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:20:54 IST" duration-ms="19148" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAddCancelButton() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAddCancelButton()[pri:1, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:20:54 IST" name="VerifyAddCancelButton" finished-at="2021-06-03T21:22:19 IST" duration-ms="84473" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: .k-grid-cancel' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: .k-grid-cancel' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:95)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:272)
at com.tetherfi.pages.BasePage.waitUntilWebElementIsVisible(BasePage.java:129)
at com.tetherfi.pages.BasePage.selectWebElement(BasePage.java:196)
at com.tetherfi.pages.RoleBasedAccessManagementPage.addCancelButton(RoleBasedAccessManagementPage.java:984)
at com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAddCancelButton(RoleBasedAccessManagementCreateTest.java:72)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"css selector","selector":".k-grid-cancel"}
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:51497}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: 2e10912d2fdb020a5a6f1210822ced18
*** Element info: {Using=css selector, value=.k-grid-cancel}
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
at org.openqa.selenium.remote.RemoteWebDriver.findElementByCssSelector(RemoteWebDriver.java:420)
at org.openqa.selenium.By$ByCssSelector.findElement(By.java:431)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:69)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at com.sun.proxy.$Proxy16.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
... 32 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAddCancelButton -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:22:19 IST" name="afterEachMethod" finished-at="2021-06-03T21:22:25 IST" duration-ms="5787" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAddCancelButton() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:22:25 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:22:44 IST" duration-ms="19171" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAddRecordWithoutRole() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAddRecordWithoutRole()[pri:2, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:22:44 IST" name="VerifyAddRecordWithoutRole" finished-at="2021-06-03T21:22:47 IST" duration-ms="2818" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAddRecordWithoutRole -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:22:47 IST" name="afterEachMethod" finished-at="2021-06-03T21:22:52 IST" duration-ms="5060" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAddRecordWithoutRole() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:22:52 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:23:09 IST" duration-ms="17284" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.AddRevertRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="AddRevertRecord()[pri:3, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:23:09 IST" name="AddRevertRecord" finished-at="2021-06-03T21:23:16 IST" duration-ms="7216" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRevertRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:23:16 IST" name="afterEachMethod" finished-at="2021-06-03T21:23:21 IST" duration-ms="4819" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.AddRevertRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:23:21 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:23:38 IST" duration-ms="16897" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyRevertForAddNewRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="VerifyRevertForAddNewRecord()[pri:4, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:23:38 IST" name="VerifyRevertForAddNewRecord" finished-at="2021-06-03T21:23:51 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementCreateTest.AddRevertRecord" duration-ms="12832" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyRevertForAddNewRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:23:51 IST" name="afterEachMethod" finished-at="2021-06-03T21:23:56 IST" duration-ms="5310" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyRevertForAddNewRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:23:56 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:24:12 IST" duration-ms="15874" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyApprovedDataSectionWithoutApproval() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="VerifyApprovedDataSectionWithoutApproval()[pri:5, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:24:12 IST" name="VerifyApprovedDataSectionWithoutApproval" finished-at="2021-06-03T21:24:19 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyRevertForAddNewRecord" duration-ms="6929" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyApprovedDataSectionWithoutApproval -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:24:19 IST" name="afterEachMethod" finished-at="2021-06-03T21:24:23 IST" duration-ms="4361" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyApprovedDataSectionWithoutApproval() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:24:23 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:24:41 IST" duration-ms="17997" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAuditTrailReportForRevert() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrailReportForRevert()[pri:6, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:24:41 IST" name="VerifyAuditTrailReportForRevert" finished-at="2021-06-03T21:25:18 IST" duration-ms="37259" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrailReportForRevert -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:25:18 IST" name="afterEachMethod" finished-at="2021-06-03T21:25:25 IST" duration-ms="6474" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAuditTrailReportForRevert() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:25:25 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:25:43 IST" duration-ms="17866" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.AddRejectRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="AddRejectRecord()[pri:7, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:25:43 IST" name="AddRejectRecord" finished-at="2021-06-03T21:25:50 IST" duration-ms="7241" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRejectRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:25:50 IST" name="afterEachMethod" finished-at="2021-06-03T21:25:55 IST" duration-ms="4664" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.AddRejectRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:25:55 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:26:11 IST" duration-ms="16629" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifySendForApprovalForAddNewRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="VerifySendForApprovalForAddNewRecord()[pri:8, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:26:11 IST" name="VerifySendForApprovalForAddNewRecord" finished-at="2021-06-03T21:26:23 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementCreateTest.AddRejectRecord" duration-ms="12185" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySendForApprovalForAddNewRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:26:23 IST" name="afterEachMethod" finished-at="2021-06-03T21:26:28 IST" duration-ms="4702" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifySendForApprovalForAddNewRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:26:28 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:26:50 IST" duration-ms="21402" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.RejectforAddNewNewRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="RejectforAddNewNewRoleBasedAccessManagementRecord()[pri:9, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:26:50 IST" name="RejectforAddNewNewRoleBasedAccessManagementRecord" finished-at="2021-06-03T21:27:06 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifySendForApprovalForAddNewRecord" duration-ms="16160" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RejectforAddNewNewRoleBasedAccessManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:27:06 IST" name="afterEachMethod" finished-at="2021-06-03T21:27:11 IST" duration-ms="5054" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.RejectforAddNewNewRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:27:11 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:27:36 IST" duration-ms="25058" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAuditTrailReportForReject() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrailReportForReject()[pri:10, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:27:36 IST" name="VerifyAuditTrailReportForReject" finished-at="2021-06-03T21:28:12 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementCreateTest.RejectforAddNewNewRoleBasedAccessManagementRecord" duration-ms="36384" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrailReportForReject -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:28:12 IST" name="afterEachMethod" finished-at="2021-06-03T21:28:18 IST" duration-ms="5467" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAuditTrailReportForReject() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:28:18 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:28:40 IST" duration-ms="21874" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyRecordAfterRejection() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="VerifyRecordAfterRejection()[pri:11, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:28:40 IST" name="VerifyRecordAfterRejection" finished-at="2021-06-03T21:28:47 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAuditTrailReportForReject" duration-ms="7714" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyRecordAfterRejection -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:28:47 IST" name="afterEachMethod" finished-at="2021-06-03T21:28:52 IST" duration-ms="4606" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyRecordAfterRejection() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:28:52 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:29:13 IST" duration-ms="21465" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.AddNewNewRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="AddNewNewRoleBasedAccessManagementRecord()[pri:12, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:29:13 IST" name="AddNewNewRoleBasedAccessManagementRecord" finished-at="2021-06-03T21:29:20 IST" duration-ms="6882" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddNewNewRoleBasedAccessManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:29:20 IST" name="afterEachMethod" finished-at="2021-06-03T21:29:26 IST" duration-ms="5341" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.AddNewNewRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:29:26 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:29:47 IST" duration-ms="21561" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAuditTrailReportForCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrailReportForCreate()[pri:13, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:29:47 IST" name="VerifyAuditTrailReportForCreate" finished-at="2021-06-03T21:30:24 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementCreateTest.AddNewNewRoleBasedAccessManagementRecord" duration-ms="36421" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrailReportForCreate -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:30:24 IST" name="afterEachMethod" finished-at="2021-06-03T21:30:28 IST" duration-ms="4639" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAuditTrailReportForCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:30:28 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:30:49 IST" duration-ms="20892" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAuditTrailDataForAddNewNewRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrailDataForAddNewNewRoleBasedAccessManagementRecord()[pri:14, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:30:49 IST" name="VerifyAuditTrailDataForAddNewNewRoleBasedAccessManagementRecord" finished-at="2021-06-03T21:30:58 IST" duration-ms="9032" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrailDataForAddNewNewRoleBasedAccessManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:30:58 IST" name="afterEachMethod" finished-at="2021-06-03T21:31:07 IST" duration-ms="8557" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAuditTrailDataForAddNewNewRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:31:07 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:31:25 IST" duration-ms="18537" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifySendForApprovalForAddNewNewRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="VerifySendForApprovalForAddNewNewRoleBasedAccessManagementRecord()[pri:15, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:31:25 IST" name="VerifySendForApprovalForAddNewNewRoleBasedAccessManagementRecord" finished-at="2021-06-03T21:31:37 IST" duration-ms="12006" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySendForApprovalForAddNewNewRoleBasedAccessManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:31:37 IST" name="afterEachMethod" finished-at="2021-06-03T21:31:42 IST" duration-ms="4657" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifySendForApprovalForAddNewNewRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:31:42 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:32:23 IST" duration-ms="41428" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAuditTrailReportForSendForApproval() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrailReportForSendForApproval()[pri:16, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:32:23 IST" name="VerifyAuditTrailReportForSendForApproval" finished-at="2021-06-03T21:32:59 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifySendForApprovalForAddNewNewRoleBasedAccessManagementRecord" duration-ms="35456" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrailReportForSendForApproval -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:32:59 IST" name="afterEachMethod" finished-at="2021-06-03T21:33:04 IST" duration-ms="4985" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAuditTrailReportForSendForApproval() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:33:04 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:33:21 IST" duration-ms="16849" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.ApproveforAddNewNewRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="ApproveforAddNewNewRoleBasedAccessManagementRecord()[pri:17, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:33:21 IST" name="ApproveforAddNewNewRoleBasedAccessManagementRecord" finished-at="2021-06-03T21:33:38 IST" duration-ms="17730" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ApproveforAddNewNewRoleBasedAccessManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:33:38 IST" name="afterEachMethod" finished-at="2021-06-03T21:33:43 IST" duration-ms="4992" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.ApproveforAddNewNewRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:33:43 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:34:01 IST" duration-ms="17556" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAuditTrailReportForApprove() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrailReportForApprove()[pri:18, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:34:01 IST" name="VerifyAuditTrailReportForApprove" finished-at="2021-06-03T21:34:35 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementCreateTest.ApproveforAddNewNewRoleBasedAccessManagementRecord" duration-ms="33921" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrailReportForApprove -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:34:35 IST" name="afterEachMethod" finished-at="2021-06-03T21:34:40 IST" duration-ms="5140" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyAuditTrailReportForApprove() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToNewRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:34:40 IST" name="NavigateToNewRoleBasedAccessManagementPage" finished-at="2021-06-03T21:34:59 IST" duration-ms="19222" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyRecordApprovedDataSectionafterApproval() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToNewRoleBasedAccessManagementPage -->
        <test-method signature="VerifyRecordApprovedDataSectionafterApproval()[pri:19, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:34:59 IST" name="VerifyRecordApprovedDataSectionafterApproval" finished-at="2021-06-03T21:35:06 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementCreateTest.ApproveforAddNewNewRoleBasedAccessManagementRecord" duration-ms="7074" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyRecordApprovedDataSectionafterApproval -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementCreateTest@6ad6ae45]" started-at="2021-06-03T21:35:06 IST" name="afterEachMethod" finished-at="2021-06-03T21:35:11 IST" duration-ms="4309" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementCreateTest.VerifyRecordApprovedDataSectionafterApproval() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
      </class> <!-- com.tetherfi.test.RoleBasedAccessManagementCreateTest -->
      <class name="com.tetherfi.test.RoleBasedAccessManagementDeleteTest">
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:47:09 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:47:27 IST" duration-ms="18100" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.DeleteCancelRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="DeleteCancelRoleBasedAccessManagementRecord()[pri:1, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:47:27 IST" name="DeleteCancelRoleBasedAccessManagementRecord" finished-at="2021-06-03T21:47:38 IST" duration-ms="10981" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteCancelRoleBasedAccessManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:47:38 IST" name="afterEachMethod" finished-at="2021-06-03T21:47:43 IST" duration-ms="5188" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.DeleteCancelRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:47:43 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:47:59 IST" duration-ms="16378" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.DeleteWithoutModifyReasonRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="DeleteWithoutModifyReasonRecord()[pri:2, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:47:59 IST" name="DeleteWithoutModifyReasonRecord" finished-at="2021-06-03T21:48:12 IST" duration-ms="13064" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteWithoutModifyReasonRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:48:12 IST" name="afterEachMethod" finished-at="2021-06-03T21:48:17 IST" duration-ms="4622" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.DeleteWithoutModifyReasonRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:48:17 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:48:36 IST" duration-ms="18677" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.DeleteRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="DeleteRecord()[pri:3, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:48:36 IST" name="DeleteRecord" finished-at="2021-06-03T21:48:53 IST" duration-ms="17451" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:48:53 IST" name="afterEachMethod" finished-at="2021-06-03T21:48:58 IST" duration-ms="4290" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.DeleteRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:48:58 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:49:16 IST" duration-ms="18875" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifyRevertForDeleteRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="VerifyRevertForDeleteRecord()[pri:4, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:49:16 IST" name="VerifyRevertForDeleteRecord" finished-at="2021-06-03T21:49:29 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementDeleteTest.DeleteRecord" duration-ms="12576" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyRevertForDeleteRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:49:29 IST" name="afterEachMethod" finished-at="2021-06-03T21:49:33 IST" duration-ms="4472" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifyRevertForDeleteRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:49:33 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:49:51 IST" duration-ms="17558" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifyAuditTrialReportForRevertDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrialReportForRevertDelete()[pri:5, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:49:51 IST" name="VerifyAuditTrialReportForRevertDelete" finished-at="2021-06-03T21:50:26 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifyRevertForDeleteRecord" duration-ms="35330" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForRevertDelete -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:50:26 IST" name="afterEachMethod" finished-at="2021-06-03T21:50:31 IST" duration-ms="4706" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifyAuditTrialReportForRevertDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:50:31 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:50:50 IST" duration-ms="19065" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.RejectDeleteRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="RejectDeleteRecord()[pri:6, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:50:50 IST" name="RejectDeleteRecord" finished-at="2021-06-03T21:51:06 IST" duration-ms="16151" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RejectDeleteRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:51:06 IST" name="afterEachMethod" finished-at="2021-06-03T21:51:11 IST" duration-ms="4718" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.RejectDeleteRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:51:11 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:51:28 IST" duration-ms="17299" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifySendForApprovalForRejectDeleteNewRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="VerifySendForApprovalForRejectDeleteNewRecord()[pri:7, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:51:28 IST" name="VerifySendForApprovalForRejectDeleteNewRecord" finished-at="2021-06-03T21:51:41 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementDeleteTest.RejectDeleteRecord" duration-ms="13010" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySendForApprovalForRejectDeleteNewRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:51:41 IST" name="afterEachMethod" finished-at="2021-06-03T21:51:45 IST" duration-ms="4091" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifySendForApprovalForRejectDeleteNewRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:51:45 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:52:02 IST" duration-ms="16489" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.RejectforDeleteRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="RejectforDeleteRoleBasedAccessManagementRecord()[pri:8, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:52:02 IST" name="RejectforDeleteRoleBasedAccessManagementRecord" finished-at="2021-06-03T21:52:19 IST" duration-ms="17078" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RejectforDeleteRoleBasedAccessManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:52:19 IST" name="afterEachMethod" finished-at="2021-06-03T21:52:24 IST" duration-ms="4710" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.RejectforDeleteRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:52:24 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:52:40 IST" duration-ms="16398" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifyAuditTrailReportForReject() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrailReportForReject()[pri:9, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:52:40 IST" name="VerifyAuditTrailReportForReject" finished-at="2021-06-03T21:53:15 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementDeleteTest.RejectforDeleteRoleBasedAccessManagementRecord" duration-ms="34961" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrailReportForReject -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:53:15 IST" name="afterEachMethod" finished-at="2021-06-03T21:53:20 IST" duration-ms="4535" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifyAuditTrailReportForReject() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:53:20 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:53:40 IST" duration-ms="20599" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.DeleteRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="DeleteRoleBasedAccessManagementRecord()[pri:10, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:53:40 IST" name="DeleteRoleBasedAccessManagementRecord" finished-at="2021-06-03T21:53:55 IST" duration-ms="14401" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteRoleBasedAccessManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:53:55 IST" name="afterEachMethod" finished-at="2021-06-03T21:53:59 IST" duration-ms="4390" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.DeleteRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:53:59 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:54:16 IST" duration-ms="17334" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifyAuditTrialReportForDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrialReportForDelete()[pri:11, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:54:16 IST" name="VerifyAuditTrialReportForDelete" finished-at="2021-06-03T21:54:54 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementDeleteTest.DeleteRoleBasedAccessManagementRecord" duration-ms="37354" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForDelete -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:54:54 IST" name="afterEachMethod" finished-at="2021-06-03T21:54:59 IST" duration-ms="5173" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifyAuditTrialReportForDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:54:59 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:55:19 IST" duration-ms="19649" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifyAuditTrailDataForDeleteRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrailDataForDeleteRoleBasedAccessManagementRecord()[pri:12, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:55:19 IST" name="VerifyAuditTrailDataForDeleteRoleBasedAccessManagementRecord" finished-at="2021-06-03T21:55:25 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementDeleteTest.DeleteRoleBasedAccessManagementRecord" duration-ms="6486" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrailDataForDeleteRoleBasedAccessManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:55:25 IST" name="afterEachMethod" finished-at="2021-06-03T21:55:31 IST" duration-ms="5955" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifyAuditTrailDataForDeleteRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:55:31 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:55:54 IST" duration-ms="22546" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifySendForApprovalForDeleteNewRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="VerifySendForApprovalForDeleteNewRecord()[pri:13, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:55:54 IST" name="VerifySendForApprovalForDeleteNewRecord" finished-at="2021-06-03T21:56:07 IST" duration-ms="12990" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySendForApprovalForDeleteNewRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:56:07 IST" name="afterEachMethod" finished-at="2021-06-03T21:56:11 IST" duration-ms="4864" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifySendForApprovalForDeleteNewRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:56:11 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:56:30 IST" duration-ms="18182" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.ApproveforDeleteRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="ApproveforDeleteRoleBasedAccessManagementRecord()[pri:14, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:56:30 IST" name="ApproveforDeleteRoleBasedAccessManagementRecord" finished-at="2021-06-03T21:56:47 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifySendForApprovalForDeleteNewRecord" duration-ms="17310" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ApproveforDeleteRoleBasedAccessManagementRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:56:47 IST" name="afterEachMethod" finished-at="2021-06-03T21:56:51 IST" duration-ms="4470" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.ApproveforDeleteRoleBasedAccessManagementRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:56:51 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:57:11 IST" duration-ms="20024" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifyAuditTrailReportForApprove() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="VerifyAuditTrailReportForApprove()[pri:15, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:57:11 IST" name="VerifyAuditTrailReportForApprove" finished-at="2021-06-03T21:57:48 IST" depends-on-methods="com.tetherfi.test.RoleBasedAccessManagementDeleteTest.ApproveforDeleteRoleBasedAccessManagementRecord" duration-ms="36195" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrailReportForApprove -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementDeleteTest@7893c715]" started-at="2021-06-03T21:57:48 IST" name="afterEachMethod" finished-at="2021-06-03T21:57:52 IST" duration-ms="4601" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementDeleteTest.VerifyAuditTrailReportForApprove() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
      </class> <!-- com.tetherfi.test.RoleBasedAccessManagementDeleteTest -->
      <class name="com.tetherfi.test.SkillConfigurationTest">
        <test-method is-config="true" signature="openApplication()[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:57:52 IST" name="openApplication" finished-at="2021-06-03T21:58:06 IST" duration-ms="13405" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openApplication -->
        <test-method is-config="true" signature="NavigateToSkillConfigurationPage()[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:06 IST" name="NavigateToSkillConfigurationPage" finished-at="2021-06-03T21:58:12 IST" duration-ms="6052" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToSkillConfigurationPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:12 IST" name="startTestCase" finished-at="2021-06-03T21:58:12 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.SkillConfigurationPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="SkillConfigurationPage()[pri:1, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:12 IST" name="SkillConfigurationPage" finished-at="2021-06-03T21:58:12 IST" duration-ms="647" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SkillConfigurationPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:12 IST" name="afterEachMethod" finished-at="2021-06-03T21:58:14 IST" duration-ms="1712" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.SkillConfigurationPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:14 IST" name="endTestCase" finished-at="2021-06-03T21:58:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.SkillConfigurationPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:14 IST" name="startTestCase" finished-at="2021-06-03T21:58:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyDropdownForAllTheColumns()[pri:2, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:14 IST" name="VerifyDropdownForAllTheColumns" finished-at="2021-06-03T21:58:26 IST" duration-ms="12418" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyDropdownForAllTheColumns -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:26 IST" name="afterEachMethod" finished-at="2021-06-03T21:58:28 IST" duration-ms="1856" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:28 IST" name="endTestCase" finished-at="2021-06-03T21:58:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method signature="VerifyColumnsHeaderEnable()[pri:3, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:28 IST" name="VerifyColumnsHeaderEnable" finished-at="2021-06-03T21:58:33 IST" duration-ms="5057" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyColumnsHeaderEnable -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:28 IST" name="startTestCase" finished-at="2021-06-03T21:58:28 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifyColumnsHeaderEnable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:33 IST" name="afterEachMethod" finished-at="2021-06-03T21:58:35 IST" duration-ms="1655" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifyColumnsHeaderEnable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:35 IST" name="endTestCase" finished-at="2021-06-03T21:58:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifyColumnsHeaderEnable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:35 IST" name="startTestCase" finished-at="2021-06-03T21:58:35 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyColumnsHeaderDisable()[pri:4, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:35 IST" name="VerifyColumnsHeaderDisable" finished-at="2021-06-03T21:58:42 IST" duration-ms="7428" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyColumnsHeaderDisable -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:42 IST" name="afterEachMethod" finished-at="2021-06-03T21:58:44 IST" duration-ms="2023" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:44 IST" name="endTestCase" finished-at="2021-06-03T21:58:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:44 IST" name="startTestCase" finished-at="2021-06-03T21:58:44 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddSkillConfigurationRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddSkillConfigurationRecord()[pri:5, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:58:44 IST" name="AddSkillConfigurationRecord" finished-at="2021-06-03T21:59:17 IST" duration-ms="32632" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of [[ChromeDriver: chrome on WINDOWS (f67092840cb08cd98a04a6247db2a0ce)] -> css selector: input[placeholder='Enter Skill Extension']] (tried for 30 second(s) with 500 milliseconds interval)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of [[ChromeDriver: chrome on WINDOWS (f67092840cb08cd98a04a6247db2a0ce)] -> css selector: input[placeholder='Enter Skill Extension']] (tried for 30 second(s) with 500 milliseconds interval)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:95)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:272)
at com.tetherfi.pages.BasePage.waitUntilWebElementIsVisible(BasePage.java:129)
at com.tetherfi.pages.BasePage.enterValueToTxtFieldWithoutClear(BasePage.java:182)
at com.tetherfi.pages.SkillConfigurationPage.addNewCancel(SkillConfigurationPage.java:693)
at com.tetherfi.test.SkillConfigurationTest.AddSkillConfigurationRecord(SkillConfigurationTest.java:77)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddSkillConfigurationRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:59:17 IST" name="afterEachMethod" finished-at="2021-06-03T21:59:19 IST" duration-ms="1843" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddSkillConfigurationRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:59:19 IST" name="endTestCase" finished-at="2021-06-03T21:59:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddSkillConfigurationRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:59:19 IST" name="startTestCase" finished-at="2021-06-03T21:59:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.DuplicateRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="DuplicateRecord()[pri:7, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:59:19 IST" name="DuplicateRecord" finished-at="2021-06-03T21:59:52 IST" duration-ms="33071" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of [[ChromeDriver: chrome on WINDOWS (f67092840cb08cd98a04a6247db2a0ce)] -> css selector: input[placeholder='Enter Skill Extension']] (tried for 30 second(s) with 500 milliseconds interval)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of [[ChromeDriver: chrome on WINDOWS (f67092840cb08cd98a04a6247db2a0ce)] -> css selector: input[placeholder='Enter Skill Extension']] (tried for 30 second(s) with 500 milliseconds interval)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:95)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:272)
at com.tetherfi.pages.BasePage.waitUntilWebElementIsVisible(BasePage.java:129)
at com.tetherfi.pages.BasePage.enterValueToTxtBox1(BasePage.java:168)
at com.tetherfi.pages.SkillConfigurationPage.addNewSkillConfigurationRecord(SkillConfigurationPage.java:713)
at com.tetherfi.test.SkillConfigurationTest.DuplicateRecord(SkillConfigurationTest.java:105)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DuplicateRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:59:52 IST" name="afterEachMethod" finished-at="2021-06-03T21:59:54 IST" duration-ms="1508" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.DuplicateRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:59:54 IST" name="startTestCase" finished-at="2021-06-03T21:59:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddRecordWithoutSkillID() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:59:54 IST" name="endTestCase" finished-at="2021-06-03T21:59:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.DuplicateRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method signature="AddRecordWithoutSkillID()[pri:8, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T21:59:54 IST" name="AddRecordWithoutSkillID" finished-at="2021-06-03T22:00:19 IST" duration-ms="25555" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutSkillID -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:00:19 IST" name="afterEachMethod" finished-at="2021-06-03T22:00:19 IST" duration-ms="264" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddRecordWithoutSkillID() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:00:19 IST" name="startTestCase" finished-at="2021-06-03T22:00:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddRecordWithoutSkillName() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:00:19 IST" name="endTestCase" finished-at="2021-06-03T22:00:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddRecordWithoutSkillID() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method signature="AddRecordWithoutSkillName()[pri:9, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:00:19 IST" name="AddRecordWithoutSkillName" finished-at="2021-06-03T22:00:25 IST" duration-ms="5589" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutSkillName -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:00:25 IST" name="afterEachMethod" finished-at="2021-06-03T22:00:27 IST" duration-ms="2043" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddRecordWithoutSkillName() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:00:27 IST" name="endTestCase" finished-at="2021-06-03T22:00:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddRecordWithoutSkillName() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:00:27 IST" name="startTestCase" finished-at="2021-06-03T22:00:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddRecordWithoutSkillExtension() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddRecordWithoutSkillExtension()[pri:10, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:00:27 IST" name="AddRecordWithoutSkillExtension" finished-at="2021-06-03T22:00:31 IST" duration-ms="3980" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutSkillExtension -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:00:31 IST" name="afterEachMethod" finished-at="2021-06-03T22:00:32 IST" duration-ms="1498" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddRecordWithoutSkillExtension() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:00:32 IST" name="endTestCase" finished-at="2021-06-03T22:00:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddRecordWithoutSkillExtension() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:00:32 IST" name="startTestCase" finished-at="2021-06-03T22:00:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddRecordWithoutSkillPriority() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddRecordWithoutSkillPriority()[pri:11, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:00:32 IST" name="AddRecordWithoutSkillPriority" finished-at="2021-06-03T22:01:34 IST" duration-ms="61621" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: input[placeholder='Enter Skill ID']' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.cssSelector: input[placeholder='Enter Skill ID']' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:95)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:272)
at com.tetherfi.pages.BasePage.waitUntilWebElementIsVisible(BasePage.java:129)
at com.tetherfi.pages.BasePage.enterValueToTxtField(BasePage.java:147)
at com.tetherfi.pages.SkillConfigurationPage.addNewRecordWithoutSkillPriority(SkillConfigurationPage.java:795)
at com.tetherfi.test.SkillConfigurationTest.AddRecordWithoutSkillPriority(SkillConfigurationTest.java:145)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"css selector","selector":"input[placeholder='Enter Skill ID']"}
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
*** Element info: {Using=css selector, value=input[placeholder='Enter Skill ID']}
at jdk.internal.reflect.GeneratedConstructorAccessor63.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
at org.openqa.selenium.remote.RemoteWebDriver.findElementByCssSelector(RemoteWebDriver.java:420)
at org.openqa.selenium.By$ByCssSelector.findElement(By.java:431)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:69)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at com.sun.proxy.$Proxy16.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
... 32 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutSkillPriority -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:34 IST" name="afterEachMethod" finished-at="2021-06-03T22:01:36 IST" duration-ms="1565" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddRecordWithoutSkillPriority() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:36 IST" name="endTestCase" finished-at="2021-06-03T22:01:36 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddRecordWithoutSkillPriority() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:36 IST" name="startTestCase" finished-at="2021-06-03T22:01:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddRecordWithoutEnabled() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddRecordWithoutEnabled()[pri:12, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:36 IST" name="AddRecordWithoutEnabled" finished-at="2021-06-03T22:01:39 IST" duration-ms="3369" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddRecordWithoutEnabled -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:39 IST" name="afterEachMethod" finished-at="2021-06-03T22:01:41 IST" duration-ms="1531" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddRecordWithoutEnabled() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:41 IST" name="endTestCase" finished-at="2021-06-03T22:01:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.AddRecordWithoutEnabled() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:41 IST" name="startTestCase" finished-at="2021-06-03T22:01:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifySearchIsNotEqualTo() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifySearchIsNotEqualTo()[pri:13, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:41 IST" name="VerifySearchIsNotEqualTo" finished-at="2021-06-03T22:01:43 IST" duration-ms="2579" status="FAIL">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
at org.openqa.selenium.remote.RemoteWebElement.isDisplayed(RemoteWebElement.java:326)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
at com.tetherfi.pages.BasePage.waitUntilWebElementListIsVisible(BasePage.java:136)
at com.tetherfi.pages.BasePage.selectDropdownFromVisibleText(BasePage.java:341)
at com.tetherfi.pages.SkillConfigurationPage.verifySearchIsNotEqualTo(SkillConfigurationPage.java:830)
at com.tetherfi.test.SkillConfigurationTest.VerifySearchIsNotEqualTo(SkillConfigurationTest.java:165)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchIsNotEqualTo -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:43 IST" name="afterEachMethod" finished-at="2021-06-03T22:01:45 IST" duration-ms="1474" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifySearchIsNotEqualTo() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:45 IST" name="startTestCase" finished-at="2021-06-03T22:01:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifySearchContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:45 IST" name="endTestCase" finished-at="2021-06-03T22:01:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifySearchIsNotEqualTo() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method signature="VerifySearchContains()[pri:14, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:45 IST" name="VerifySearchContains" finished-at="2021-06-03T22:01:47 IST" duration-ms="2657" status="FAIL">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
at org.openqa.selenium.remote.RemoteWebElement.isDisplayed(RemoteWebElement.java:326)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
at com.tetherfi.pages.BasePage.waitUntilWebElementListIsVisible(BasePage.java:136)
at com.tetherfi.pages.BasePage.selectDropdownFromVisibleText(BasePage.java:341)
at com.tetherfi.pages.SkillConfigurationPage.verifySearchContains(SkillConfigurationPage.java:853)
at com.tetherfi.test.SkillConfigurationTest.VerifySearchContains(SkillConfigurationTest.java:174)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchContains -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:47 IST" name="afterEachMethod" finished-at="2021-06-03T22:01:49 IST" duration-ms="1502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifySearchContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:49 IST" name="endTestCase" finished-at="2021-06-03T22:01:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifySearchContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:49 IST" name="startTestCase" finished-at="2021-06-03T22:01:49 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifySearchDoesNotContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifySearchDoesNotContains()[pri:15, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:49 IST" name="VerifySearchDoesNotContains" finished-at="2021-06-03T22:01:51 IST" duration-ms="2649" status="FAIL">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
at org.openqa.selenium.remote.RemoteWebElement.isDisplayed(RemoteWebElement.java:326)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
at com.tetherfi.pages.BasePage.waitUntilWebElementListIsVisible(BasePage.java:136)
at com.tetherfi.pages.BasePage.selectDropdownFromVisibleText(BasePage.java:341)
at com.tetherfi.pages.SkillConfigurationPage.verifySearchDoesNotContains(SkillConfigurationPage.java:874)
at com.tetherfi.test.SkillConfigurationTest.VerifySearchDoesNotContains(SkillConfigurationTest.java:183)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchDoesNotContains -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:51 IST" name="afterEachMethod" finished-at="2021-06-03T22:01:53 IST" duration-ms="1495" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifySearchDoesNotContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:53 IST" name="startTestCase" finished-at="2021-06-03T22:01:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifySearchStartsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:53 IST" name="endTestCase" finished-at="2021-06-03T22:01:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifySearchDoesNotContains() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method signature="VerifySearchStartsWith()[pri:16, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:53 IST" name="VerifySearchStartsWith" finished-at="2021-06-03T22:01:56 IST" duration-ms="2605" status="FAIL">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
at org.openqa.selenium.remote.RemoteWebElement.isDisplayed(RemoteWebElement.java:326)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
at com.tetherfi.pages.BasePage.waitUntilWebElementListIsVisible(BasePage.java:136)
at com.tetherfi.pages.BasePage.selectDropdownFromVisibleText(BasePage.java:341)
at com.tetherfi.pages.SkillConfigurationPage.verifySearchStartsWith(SkillConfigurationPage.java:896)
at com.tetherfi.test.SkillConfigurationTest.VerifySearchStartsWith(SkillConfigurationTest.java:192)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchStartsWith -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:56 IST" name="afterEachMethod" finished-at="2021-06-03T22:01:57 IST" duration-ms="1494" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifySearchStartsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:57 IST" name="endTestCase" finished-at="2021-06-03T22:01:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifySearchStartsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:57 IST" name="startTestCase" finished-at="2021-06-03T22:01:57 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifySearchEndsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifySearchEndsWith()[pri:17, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:01:57 IST" name="VerifySearchEndsWith" finished-at="2021-06-03T22:02:00 IST" duration-ms="3012" status="FAIL">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
at org.openqa.selenium.remote.RemoteWebElement.isDisplayed(RemoteWebElement.java:326)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
at com.tetherfi.pages.BasePage.waitUntilWebElementListIsVisible(BasePage.java:136)
at com.tetherfi.pages.BasePage.selectDropdownFromVisibleText(BasePage.java:341)
at com.tetherfi.pages.SkillConfigurationPage.verifySearchEndsWith(SkillConfigurationPage.java:918)
at com.tetherfi.test.SkillConfigurationTest.VerifySearchEndsWith(SkillConfigurationTest.java:201)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifySearchEndsWith -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:00 IST" name="afterEachMethod" finished-at="2021-06-03T22:02:02 IST" duration-ms="1443" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifySearchEndsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:02 IST" name="startTestCase" finished-at="2021-06-03T22:02:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.EditCancelSkillConfigurationRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:02 IST" name="endTestCase" finished-at="2021-06-03T22:02:02 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifySearchEndsWith() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method signature="EditCancelSkillConfigurationRecord()[pri:18, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:02 IST" name="EditCancelSkillConfigurationRecord" finished-at="2021-06-03T22:02:04 IST" duration-ms="2655" status="FAIL">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
at org.openqa.selenium.remote.RemoteWebElement.isDisplayed(RemoteWebElement.java:326)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
at com.tetherfi.pages.BasePage.waitUntilWebElementListIsVisible(BasePage.java:136)
at com.tetherfi.pages.BasePage.selectDropdownFromVisibleText(BasePage.java:341)
at com.tetherfi.pages.SkillConfigurationPage.searchSkillConfigurationRecord(SkillConfigurationPage.java:415)
at com.tetherfi.pages.SkillConfigurationPage.editcancel(SkillConfigurationPage.java:935)
at com.tetherfi.test.SkillConfigurationTest.EditCancelSkillConfigurationRecord(SkillConfigurationTest.java:211)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditCancelSkillConfigurationRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:04 IST" name="afterEachMethod" finished-at="2021-06-03T22:02:06 IST" duration-ms="1452" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.EditCancelSkillConfigurationRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:06 IST" name="endTestCase" finished-at="2021-06-03T22:02:06 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.EditCancelSkillConfigurationRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:06 IST" name="startTestCase" finished-at="2021-06-03T22:02:06 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.EditSkillConfigurationRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="EditSkillConfigurationRecord()[pri:19, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:06 IST" name="EditSkillConfigurationRecord" finished-at="2021-06-03T22:02:08 IST" duration-ms="2576" status="FAIL">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
at org.openqa.selenium.remote.RemoteWebElement.isDisplayed(RemoteWebElement.java:326)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
at com.tetherfi.pages.BasePage.waitUntilWebElementListIsVisible(BasePage.java:136)
at com.tetherfi.pages.BasePage.selectDropdownFromVisibleText(BasePage.java:341)
at com.tetherfi.pages.SkillConfigurationPage.searchSkillConfigurationRecord(SkillConfigurationPage.java:415)
at com.tetherfi.pages.SkillConfigurationPage.editSkillConfigurationRecord(SkillConfigurationPage.java:954)
at com.tetherfi.test.SkillConfigurationTest.EditSkillConfigurationRecord(SkillConfigurationTest.java:220)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditSkillConfigurationRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:08 IST" name="afterEachMethod" finished-at="2021-06-03T22:02:10 IST" duration-ms="1427" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.EditSkillConfigurationRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:10 IST" name="endTestCase" finished-at="2021-06-03T22:02:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.EditSkillConfigurationRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method signature="searchPage()[pri:21, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:10 IST" name="searchPage" finished-at="2021-06-03T22:02:12 IST" duration-ms="2551" status="FAIL">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
at org.openqa.selenium.remote.RemoteWebElement.isDisplayed(RemoteWebElement.java:326)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
at com.tetherfi.pages.BasePage.waitUntilWebElementListIsVisible(BasePage.java:136)
at com.tetherfi.pages.BasePage.selectDropdownFromVisibleText(BasePage.java:341)
at com.tetherfi.pages.SkillConfigurationPage.clearAll(SkillConfigurationPage.java:655)
at com.tetherfi.test.SkillConfigurationTest.searchPage(SkillConfigurationTest.java:247)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:10 IST" name="startTestCase" finished-at="2021-06-03T22:02:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:12 IST" name="afterEachMethod" finished-at="2021-06-03T22:02:14 IST" duration-ms="1440" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method signature="ExportToExcel()[pri:22, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:14 IST" name="ExportToExcel" finished-at="2021-06-03T22:02:17 IST" duration-ms="3357" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExportToExcel -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:14 IST" name="endTestCase" finished-at="2021-06-03T22:02:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:14 IST" name="startTestCase" finished-at="2021-06-03T22:02:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:17 IST" name="afterEachMethod" finished-at="2021-06-03T22:02:19 IST" duration-ms="1487" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:19 IST" name="endTestCase" finished-at="2021-06-03T22:02:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:19 IST" name="startTestCase" finished-at="2021-06-03T22:02:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="ExportToExcelData()[pri:23, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:19 IST" name="ExportToExcelData" finished-at="2021-06-03T22:02:19 IST" duration-ms="72" status="FAIL">
          <exception class="java.lang.ArrayIndexOutOfBoundsException">
            <message>
              <![CDATA[Index 1 out of bounds for length 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
at com.tetherfi.pages.SkillConfigurationPage.getdata(SkillConfigurationPage.java:309)
at com.tetherfi.pages.SkillConfigurationPage.verifyexportToExcelSheet(SkillConfigurationPage.java:301)
at com.tetherfi.test.SkillConfigurationTest.ExportToExcelData(SkillConfigurationTest.java:266)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.ArrayIndexOutOfBoundsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExportToExcelData -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:19 IST" name="afterEachMethod" finished-at="2021-06-03T22:02:20 IST" duration-ms="1588" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:20 IST" name="endTestCase" finished-at="2021-06-03T22:02:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:20 IST" name="startTestCase" finished-at="2021-06-03T22:02:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.DeleteCancelRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="DeleteCancelRecord()[pri:24, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:20 IST" name="DeleteCancelRecord" finished-at="2021-06-03T22:02:23 IST" duration-ms="2598" status="FAIL">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
at org.openqa.selenium.remote.RemoteWebElement.isDisplayed(RemoteWebElement.java:326)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
at com.tetherfi.pages.BasePage.waitUntilWebElementListIsVisible(BasePage.java:136)
at com.tetherfi.pages.BasePage.selectDropdownFromVisibleText(BasePage.java:341)
at com.tetherfi.pages.SkillConfigurationPage.searchSkillConfigurationRecord(SkillConfigurationPage.java:415)
at com.tetherfi.pages.SkillConfigurationPage.verifydeleteNo(SkillConfigurationPage.java:624)
at com.tetherfi.test.SkillConfigurationTest.DeleteCancelRecord(SkillConfigurationTest.java:275)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteCancelRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:23 IST" name="afterEachMethod" finished-at="2021-06-03T22:02:24 IST" duration-ms="1470" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.DeleteCancelRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:24 IST" name="endTestCase" finished-at="2021-06-03T22:02:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.DeleteCancelRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method signature="DeleteRecord()[pri:25, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:24 IST" name="DeleteRecord" finished-at="2021-06-03T22:02:28 IST" duration-ms="3217" status="FAIL">
          <exception class="org.openqa.selenium.StaleElementReferenceException">
            <message>
              <![CDATA[stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/stale_element_reference.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
at org.openqa.selenium.remote.RemoteWebElement.isDisplayed(RemoteWebElement.java:326)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
at com.tetherfi.pages.BasePage.waitUntilWebElementListIsVisible(BasePage.java:136)
at com.tetherfi.pages.BasePage.selectDropdownFromVisibleText(BasePage.java:341)
at com.tetherfi.pages.SkillConfigurationPage.searchSkillConfigurationRecord(SkillConfigurationPage.java:415)
at com.tetherfi.pages.SkillConfigurationPage.deleteSkillConfigRecord(SkillConfigurationPage.java:975)
at com.tetherfi.test.SkillConfigurationTest.DeleteRecord(SkillConfigurationTest.java:286)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.StaleElementReferenceException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteRecord -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:24 IST" name="startTestCase" finished-at="2021-06-03T22:02:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.DeleteRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:28 IST" name="afterEachMethod" finished-at="2021-06-03T22:02:29 IST" duration-ms="1453" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.DeleteRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:29 IST" name="startTestCase" finished-at="2021-06-03T22:02:29 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifyAuditTrialReportForDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:29 IST" name="endTestCase" finished-at="2021-06-03T22:02:29 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.DeleteRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method signature="VerifyAuditTrialReportForDelete()[pri:26, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:29 IST" name="VerifyAuditTrialReportForDelete" finished-at="2021-06-03T22:02:58 IST" duration-ms="29354" status="FAIL">
          <exception class="java.lang.IndexOutOfBoundsException">
            <message>
              <![CDATA[Index 1 out of bounds for length 1]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1
at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
at java.base/java.util.Objects.checkIndex(Objects.java:373)
at java.base/java.util.ArrayList.get(ArrayList.java:427)
at com.tetherfi.pages.OCMReportsPage.getFirstRowDatafromTable1(OCMReportsPage.java:1755)
at com.tetherfi.pages.OCMReportsPage.verifySkillConfigurationdelete(OCMReportsPage.java:3252)
at com.tetherfi.test.SkillConfigurationTest.VerifyAuditTrialReportForDelete(SkillConfigurationTest.java:302)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IndexOutOfBoundsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForDelete -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:02:58 IST" name="afterEachMethod" finished-at="2021-06-03T22:03:00 IST" duration-ms="1502" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifyAuditTrialReportForDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:03:00 IST" name="endTestCase" finished-at="2021-06-03T22:03:00 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.VerifyAuditTrialReportForDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:03:00 IST" name="startTestCase" finished-at="2021-06-03T22:03:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="SearchClearSearch()[pri:28, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:03:00 IST" name="SearchClearSearch" finished-at="2021-06-03T22:04:22 IST" duration-ms="82646" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for element to be clickable: [[ChromeDriver: chrome on WINDOWS (f67092840cb08cd98a04a6247db2a0ce)] -> id: 1001sTextToSearch] (tried for 20 second(s) with 500 milliseconds interval)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for element to be clickable: [[ChromeDriver: chrome on WINDOWS (f67092840cb08cd98a04a6247db2a0ce)] -> id: 1001sTextToSearch] (tried for 20 second(s) with 500 milliseconds interval)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:95)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:272)
at com.tetherfi.pages.BasePage.waitUntilWebElementIsClickable(BasePage.java:259)
at com.tetherfi.pages.BasePage.enterValueToTxtField(BasePage.java:148)
at com.tetherfi.pages.SkillConfigurationPage.searchSkillConfigurationRecord(SkillConfigurationPage.java:416)
at com.tetherfi.pages.SkillConfigurationPage.verifyinvalidsearch(SkillConfigurationPage.java:672)
at com.tetherfi.test.SkillConfigurationTest.SearchClearSearch(SkillConfigurationTest.java:329)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchClearSearch -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:04:23 IST" name="afterEachMethod" finished-at="2021-06-03T22:04:24 IST" duration-ms="1535" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:04:24 IST" name="endTestCase" finished-at="2021-06-03T22:04:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:04:24 IST" name="startTestCase" finished-at="2021-06-03T22:04:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.ExporttoExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="ExporttoExcelWithoutData()[pri:29, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:04:24 IST" name="ExporttoExcelWithoutData" finished-at="2021-06-03T22:05:47 IST" duration-ms="82652" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for element to be clickable: [[ChromeDriver: chrome on WINDOWS (f67092840cb08cd98a04a6247db2a0ce)] -> id: 1001sTextToSearch] (tried for 20 second(s) with 500 milliseconds interval)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for element to be clickable: [[ChromeDriver: chrome on WINDOWS (f67092840cb08cd98a04a6247db2a0ce)] -> id: 1001sTextToSearch] (tried for 20 second(s) with 500 milliseconds interval)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:95)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:272)
at com.tetherfi.pages.BasePage.waitUntilWebElementIsClickable(BasePage.java:259)
at com.tetherfi.pages.BasePage.enterValueToTxtField(BasePage.java:148)
at com.tetherfi.pages.SkillConfigurationPage.searchSkillConfigurationRecord(SkillConfigurationPage.java:416)
at com.tetherfi.pages.SkillConfigurationPage.ExporttoExcelWithoutData(SkillConfigurationPage.java:400)
at com.tetherfi.test.SkillConfigurationTest.ExporttoExcelWithoutData(SkillConfigurationTest.java:342)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExporttoExcelWithoutData -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:05:47 IST" name="afterEachMethod" finished-at="2021-06-03T22:05:48 IST" duration-ms="1535" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.ExporttoExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:05:48 IST" name="endTestCase" finished-at="2021-06-03T22:05:48 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.ExporttoExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:05:48 IST" name="startTestCase" finished-at="2021-06-03T22:05:48 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.SortingByAscending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="SortingByAscending()[pri:30, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:05:48 IST" name="SortingByAscending" finished-at="2021-06-03T22:06:47 IST" duration-ms="58914" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //a[text()='Skill Name']' (tried for 30 second(s) with 500 milliseconds interval)]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for visibility of Proxy element for: DefaultElementLocator 'By.xpath: //a[text()='Skill Name']' (tried for 30 second(s) with 500 milliseconds interval)
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:95)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:272)
at com.tetherfi.pages.BasePage.waitUntilWebElementIsVisible(BasePage.java:129)
at com.tetherfi.pages.BasePage.selectWebElement(BasePage.java:196)
at com.tetherfi.pages.SkillConfigurationPage.SortByAscending(SkillConfigurationPage.java:423)
at com.tetherfi.test.SkillConfigurationTest.SortingByAscending(SkillConfigurationTest.java:348)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
Caused by: org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//a[text()='Skill Name']"}
  (Session info: chrome=91.0.4472.77)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
*** Element info: {Using=xpath, value=//a[text()='Skill Name']}
at jdk.internal.reflect.GeneratedConstructorAccessor63.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
at org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:428)
at org.openqa.selenium.By$ByXPath.findElement(By.java:353)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:69)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at com.sun.proxy.$Proxy16.isDisplayed(Unknown Source)
at org.openqa.selenium.support.ui.ExpectedConditions.elementIfVisible(ExpectedConditions.java:314)
at org.openqa.selenium.support.ui.ExpectedConditions.access$000(ExpectedConditions.java:43)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:300)
at org.openqa.selenium.support.ui.ExpectedConditions$10.apply(ExpectedConditions.java:297)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:249)
... 32 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SortingByAscending -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="afterEachMethod" finished-at="2021-06-03T22:06:47 IST" duration-ms="11" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.SkillConfigurationTest.SortingByAscending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <exception class="org.openqa.selenium.NoSuchWindowException">
            <message>
              <![CDATA[no such window: target window already closed
from unknown error: web view not found
  (Session info: chrome=91.0.4472.77)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchWindowException: no such window: target window already closed
from unknown error: web view not found
  (Session info: chrome=91.0.4472.77)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.50.8', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '14.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 91.0.4472.77, chrome: {chromedriverVersion: 90.0.4430.24 (4c6d850f087da..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:53985}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:largeBlob: true, webauthn:virtualAuthenticators: true}
Session ID: f67092840cb08cd98a04a6247db2a0ce
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:481)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:609)
at org.openqa.selenium.remote.RemoteWebDriver$RemoteNavigation.refresh(RemoteWebDriver.java:865)
at com.tetherfi.test.SkillConfigurationTest.afterEachMethod(SkillConfigurationTest.java:442)
at jdk.internal.reflect.GeneratedMethodAccessor26.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:340)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:294)
at org.testng.internal.TestInvoker.runConfigMethods(TestInvoker.java:683)
at org.testng.internal.TestInvoker.runAfterGroupsConfigurations(TestInvoker.java:658)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:642)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchWindowException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="endTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207673" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="startTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207674" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="afterEachMethod" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207685" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="endTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207686" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="startTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207687" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="endTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207706" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="afterEachMethod" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207706" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="startTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207707" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="afterEachMethod" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207717" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="endTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207717" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="startTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207718" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="afterEachMethod" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207728" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="endTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207728" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="startTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207729" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="afterEachMethod" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207740" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="endTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207741" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="startTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207743" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="endTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207752" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="afterEachMethod" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207752" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="startTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207753" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="afterEachMethod" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207761" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="endTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207762" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="startTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207762" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="afterEachMethod" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207775" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="endTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207775" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="startTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207776" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="afterEachMethod" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207784" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="endTestCase" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207785" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.tetherfi.test.SkillConfigurationTest@36f6d25c]" started-at="2021-06-03T22:06:47 IST" name="tearDown" finished-at="1970-01-01T05:30:00 IST" duration-ms="-1622738207786" status="SKIP">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.tetherfi.test.SkillConfigurationTest -->
      <class name="com.tetherfi.test.RoleBasedAccessManagementUITest">
        <test-method is-config="true" signature="openApplication()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:12:41 IST" name="openApplication" finished-at="2021-06-03T21:12:55 IST" duration-ms="13805" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openApplication -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:12:55 IST" name="startTestCase" finished-at="2021-06-03T21:12:55 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.RoleBasedAccessManagementPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:12:55 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:13:01 IST" duration-ms="5812" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="RoleBasedAccessManagementPage()[pri:1, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:13:01 IST" name="RoleBasedAccessManagementPage" finished-at="2021-06-03T21:13:04 IST" duration-ms="3191" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RoleBasedAccessManagementPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:13:04 IST" name="afterEachMethod" finished-at="2021-06-03T21:13:06 IST" duration-ms="1896" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.RoleBasedAccessManagementPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:13:06 IST" name="endTestCase" finished-at="2021-06-03T21:13:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.RoleBasedAccessManagementPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:13:06 IST" name="startTestCase" finished-at="2021-06-03T21:13:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyRoleBasedAccessManagementApprovedDataPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:13:06 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:13:16 IST" duration-ms="9976" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="VerifyRoleBasedAccessManagementApprovedDataPage()[pri:2, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:13:16 IST" name="VerifyRoleBasedAccessManagementApprovedDataPage" finished-at="2021-06-03T21:13:16 IST" duration-ms="515" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyRoleBasedAccessManagementApprovedDataPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:13:16 IST" name="afterEachMethod" finished-at="2021-06-03T21:13:22 IST" duration-ms="5094" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyRoleBasedAccessManagementApprovedDataPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:13:22 IST" name="endTestCase" finished-at="2021-06-03T21:13:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyRoleBasedAccessManagementApprovedDataPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:13:22 IST" name="startTestCase" finished-at="2021-06-03T21:13:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyRoleBasedAccessManagementAuditTrailDataPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:13:22 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:13:34 IST" duration-ms="12090" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="VerifyRoleBasedAccessManagementAuditTrailDataPage()[pri:3, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:13:34 IST" name="VerifyRoleBasedAccessManagementAuditTrailDataPage" finished-at="2021-06-03T21:13:42 IST" duration-ms="8445" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyRoleBasedAccessManagementAuditTrailDataPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:13:42 IST" name="afterEachMethod" finished-at="2021-06-03T21:13:44 IST" duration-ms="2024" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyRoleBasedAccessManagementAuditTrailDataPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:13:44 IST" name="endTestCase" finished-at="2021-06-03T21:13:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyRoleBasedAccessManagementAuditTrailDataPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:13:44 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:13:50 IST" duration-ms="5660" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:13:44 IST" name="startTestCase" finished-at="2021-06-03T21:13:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyMakeRoleBasedAccessManagementChangeButton()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyMakeRoleBasedAccessManagementChangeButton()[pri:4, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:13:50 IST" name="VerifyMakeRoleBasedAccessManagementChangeButton" finished-at="2021-06-03T21:14:02 IST" duration-ms="11773" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyMakeRoleBasedAccessManagementChangeButton -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:14:02 IST" name="afterEachMethod" finished-at="2021-06-03T21:14:03 IST" duration-ms="1494" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyMakeRoleBasedAccessManagementChangeButton()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:14:03 IST" name="endTestCase" finished-at="2021-06-03T21:14:03 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyMakeRoleBasedAccessManagementChangeButton()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:14:03 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:14:09 IST" duration-ms="6022" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:14:03 IST" name="startTestCase" finished-at="2021-06-03T21:14:03 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyDropdownForAllTheColumns()[pri:5, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:14:09 IST" name="VerifyDropdownForAllTheColumns" finished-at="2021-06-03T21:14:28 IST" duration-ms="18669" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyDropdownForAllTheColumns -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:14:28 IST" name="afterEachMethod" finished-at="2021-06-03T21:14:30 IST" duration-ms="1818" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:14:30 IST" name="endTestCase" finished-at="2021-06-03T21:14:30 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:14:30 IST" name="startTestCase" finished-at="2021-06-03T21:14:30 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyColumnsHeaderEnable() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:14:30 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:14:38 IST" duration-ms="8180" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="VerifyColumnsHeaderEnable()[pri:6, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:14:38 IST" name="VerifyColumnsHeaderEnable" finished-at="2021-06-03T21:14:55 IST" duration-ms="17650" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyColumnsHeaderEnable -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:14:55 IST" name="afterEachMethod" finished-at="2021-06-03T21:14:57 IST" duration-ms="1598" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyColumnsHeaderEnable() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:14:57 IST" name="endTestCase" finished-at="2021-06-03T21:14:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyColumnsHeaderEnable() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:14:57 IST" name="startTestCase" finished-at="2021-06-03T21:14:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:14:57 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:15:02 IST" duration-ms="5369" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="VerifyColumnsHeaderDisable()[pri:7, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:15:02 IST" name="VerifyColumnsHeaderDisable" finished-at="2021-06-03T21:15:13 IST" duration-ms="10876" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyColumnsHeaderDisable -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:15:13 IST" name="afterEachMethod" finished-at="2021-06-03T21:15:15 IST" duration-ms="1504" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:15:15 IST" name="endTestCase" finished-at="2021-06-03T21:15:15 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:15:15 IST" name="startTestCase" finished-at="2021-06-03T21:15:15 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyArrowMoveForPreviousAndNextPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:15:15 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:15:23 IST" duration-ms="8638" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="VerifyArrowMoveForPreviousAndNextPage()[pri:8, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:15:23 IST" name="VerifyArrowMoveForPreviousAndNextPage" finished-at="2021-06-03T21:15:34 IST" duration-ms="10847" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyArrowMoveForPreviousAndNextPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:15:34 IST" name="afterEachMethod" finished-at="2021-06-03T21:15:36 IST" duration-ms="1630" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyArrowMoveForPreviousAndNextPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:15:36 IST" name="endTestCase" finished-at="2021-06-03T21:15:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyArrowMoveForPreviousAndNextPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:15:36 IST" name="startTestCase" finished-at="2021-06-03T21:15:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyArrowMoveForFirstAndLastPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:15:36 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:15:41 IST" duration-ms="5249" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="VerifyArrowMoveForFirstAndLastPage()[pri:9, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:15:41 IST" name="VerifyArrowMoveForFirstAndLastPage" finished-at="2021-06-03T21:15:52 IST" duration-ms="10926" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyArrowMoveForFirstAndLastPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:15:52 IST" name="afterEachMethod" finished-at="2021-06-03T21:15:54 IST" duration-ms="1600" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyArrowMoveForFirstAndLastPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:15:54 IST" name="endTestCase" finished-at="2021-06-03T21:15:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyArrowMoveForFirstAndLastPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:15:54 IST" name="startTestCase" finished-at="2021-06-03T21:15:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyTotalNumberOfItemsPerPageDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:15:54 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:15:59 IST" duration-ms="5474" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="VerifyTotalNumberOfItemsPerPageDetails()[pri:10, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:15:59 IST" name="VerifyTotalNumberOfItemsPerPageDetails" finished-at="2021-06-03T21:16:10 IST" duration-ms="10940" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyTotalNumberOfItemsPerPageDetails -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:16:10 IST" name="afterEachMethod" finished-at="2021-06-03T21:16:12 IST" duration-ms="1765" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyTotalNumberOfItemsPerPageDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:16:12 IST" name="endTestCase" finished-at="2021-06-03T21:16:12 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyTotalNumberOfItemsPerPageDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:16:12 IST" name="startTestCase" finished-at="2021-06-03T21:16:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyNumberOfItemsPerPageSelection()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:16:12 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:16:20 IST" duration-ms="8438" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="VerifyNumberOfItemsPerPageSelection()[pri:11, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:16:20 IST" name="VerifyNumberOfItemsPerPageSelection" finished-at="2021-06-03T21:16:34 IST" duration-ms="13461" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[item per page assertion failed did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: item per page assertion failed did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyNumberOfItemsPerPageSelection(RoleBasedAccessManagementUITest.java:121)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyNumberOfItemsPerPageSelection -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:16:34 IST" name="afterEachMethod" finished-at="2021-06-03T21:16:36 IST" duration-ms="1808" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyNumberOfItemsPerPageSelection()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:16:36 IST" name="endTestCase" finished-at="2021-06-03T21:16:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyNumberOfItemsPerPageSelection()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:16:36 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:16:47 IST" duration-ms="11327" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:16:36 IST" name="startTestCase" finished-at="2021-06-03T21:16:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="ExportToExcel()[pri:12, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:16:47 IST" name="ExportToExcel" finished-at="2021-06-03T21:17:01 IST" duration-ms="14306" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExportToExcel -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:17:01 IST" name="afterEachMethod" finished-at="2021-06-03T21:17:01 IST" duration-ms="304" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:17:01 IST" name="endTestCase" finished-at="2021-06-03T21:17:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:17:01 IST" name="startTestCase" finished-at="2021-06-03T21:17:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:17:01 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:17:10 IST" duration-ms="8283" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="ExportToExcelData()[pri:13, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:17:10 IST" name="ExportToExcelData" finished-at="2021-06-03T21:17:22 IST" duration-ms="12547" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExportToExcelData -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:17:22 IST" name="afterEachMethod" finished-at="2021-06-03T21:17:24 IST" duration-ms="2100" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:17:24 IST" name="endTestCase" finished-at="2021-06-03T21:17:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:17:24 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:17:36 IST" duration-ms="11159" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:17:24 IST" name="startTestCase" finished-at="2021-06-03T21:17:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyExportToExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyExportToExcelWithoutData()[pri:14, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:17:36 IST" name="VerifyExportToExcelWithoutData" finished-at="2021-06-03T21:17:55 IST" duration-ms="18963" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyExportToExcelWithoutData -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:17:55 IST" name="afterEachMethod" finished-at="2021-06-03T21:17:56 IST" duration-ms="1841" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyExportToExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:17:56 IST" name="endTestCase" finished-at="2021-06-03T21:17:56 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyExportToExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:17:56 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:18:02 IST" duration-ms="5847" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:17:56 IST" name="startTestCase" finished-at="2021-06-03T21:17:56 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.SortingByAscending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="SortingByAscending()[pri:15, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:18:02 IST" name="SortingByAscending" finished-at="2021-06-03T21:18:17 IST" duration-ms="15052" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SortingByAscending -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:18:17 IST" name="afterEachMethod" finished-at="2021-06-03T21:18:19 IST" duration-ms="1909" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.SortingByAscending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:18:19 IST" name="endTestCase" finished-at="2021-06-03T21:18:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.SortingByAscending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:18:19 IST" name="startTestCase" finished-at="2021-06-03T21:18:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.SortingByDescending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:18:19 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:18:27 IST" duration-ms="8169" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="SortingByDescending()[pri:16, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:18:27 IST" name="SortingByDescending" finished-at="2021-06-03T21:18:42 IST" duration-ms="14606" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SortingByDescending -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:18:42 IST" name="afterEachMethod" finished-at="2021-06-03T21:18:45 IST" duration-ms="3094" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.SortingByDescending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:18:45 IST" name="endTestCase" finished-at="2021-06-03T21:18:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.SortingByDescending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:18:45 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:18:53 IST" duration-ms="8005" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:18:45 IST" name="startTestCase" finished-at="2021-06-03T21:18:45 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyDragAndDrop()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyDragAndDrop()[pri:17, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:18:53 IST" name="VerifyDragAndDrop" finished-at="2021-06-03T21:19:05 IST" duration-ms="11900" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyDragAndDrop -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:05 IST" name="afterEachMethod" finished-at="2021-06-03T21:19:07 IST" duration-ms="1719" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyDragAndDrop()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:07 IST" name="endTestCase" finished-at="2021-06-03T21:19:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyDragAndDrop()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:07 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:19:13 IST" duration-ms="6067" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:07 IST" name="startTestCase" finished-at="2021-06-03T21:19:07 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyDragAndDropofAlreadyGroupedHeader()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyDragAndDropofAlreadyGroupedHeader()[pri:18, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:13 IST" name="VerifyDragAndDropofAlreadyGroupedHeader" finished-at="2021-06-03T21:19:25 IST" duration-ms="12466" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyDragAndDropofAlreadyGroupedHeader -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:25 IST" name="afterEachMethod" finished-at="2021-06-03T21:19:27 IST" duration-ms="1972" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyDragAndDropofAlreadyGroupedHeader()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:27 IST" name="endTestCase" finished-at="2021-06-03T21:19:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.VerifyDragAndDropofAlreadyGroupedHeader()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:27 IST" name="startTestCase" finished-at="2021-06-03T21:19:27 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.database() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:27 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:19:36 IST" duration-ms="9036" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="database()[pri:19, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:36 IST" name="database" finished-at="2021-06-03T21:19:41 IST" duration-ms="4371" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at com.tetherfi.test.RoleBasedAccessManagementUITest.database(RoleBasedAccessManagementUITest.java:201)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- database -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:41 IST" name="afterEachMethod" finished-at="2021-06-03T21:19:43 IST" duration-ms="1972" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.database() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:43 IST" name="endTestCase" finished-at="2021-06-03T21:19:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.database() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:43 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:19:49 IST" duration-ms="6166" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:43 IST" name="startTestCase" finished-at="2021-06-03T21:19:43 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="searchPage()[pri:20, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:49 IST" name="searchPage" finished-at="2021-06-03T21:19:56 IST" duration-ms="6968" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:56 IST" name="afterEachMethod" finished-at="2021-06-03T21:19:58 IST" duration-ms="2268" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:58 IST" name="endTestCase" finished-at="2021-06-03T21:19:58 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:58 IST" name="startTestCase" finished-at="2021-06-03T21:19:58 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.searchwithoutSearchTextbox() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:19:58 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:20:06 IST" duration-ms="7844" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method signature="searchwithoutSearchTextbox()[pri:21, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:20:06 IST" name="searchwithoutSearchTextbox" finished-at="2021-06-03T21:20:12 IST" duration-ms="6328" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchwithoutSearchTextbox -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:20:12 IST" name="afterEachMethod" finished-at="2021-06-03T21:20:14 IST" duration-ms="1999" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.searchwithoutSearchTextbox() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:20:14 IST" name="endTestCase" finished-at="2021-06-03T21:20:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.searchwithoutSearchTextbox() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToRoleBasedAccessManagementPage()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:20:14 IST" name="NavigateToRoleBasedAccessManagementPage" finished-at="2021-06-03T21:20:23 IST" duration-ms="9243" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToRoleBasedAccessManagementPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:20:14 IST" name="startTestCase" finished-at="2021-06-03T21:20:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="SearchClearSearch()[pri:22, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:20:23 IST" name="SearchClearSearch" finished-at="2021-06-03T21:20:31 IST" duration-ms="7463" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchClearSearch -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:20:31 IST" name="afterEachMethod" finished-at="2021-06-03T21:20:33 IST" duration-ms="1888" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:20:33 IST" name="endTestCase" finished-at="2021-06-03T21:20:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.RoleBasedAccessManagementUITest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.tetherfi.test.RoleBasedAccessManagementUITest@4d20616a]" started-at="2021-06-03T21:20:33 IST" name="tearDown" finished-at="2021-06-03T21:20:35 IST" duration-ms="2326" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.tetherfi.test.RoleBasedAccessManagementUITest -->
    </test> <!-- Modules -->
  </suite> <!-- Tetherfi Test Automation -->
</testng-results>
