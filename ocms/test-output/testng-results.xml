<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="39" passed="27" failed="12" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-04-18T14:11:01 IST" name="Default suite" finished-at="2020-04-18T14:28:25 IST" duration-ms="1043853">
    <groups>
    </groups>
    <test started-at="2020-04-18T14:11:01 IST" name="Default test" finished-at="2020-04-18T14:28:25 IST" duration-ms="1043853">
      <class name="com.tetherfi.test.fax.FaxLineConfigTest">
        <test-method is-config="true" signature="openApplication()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:11:01 IST" name="openApplication" finished-at="2020-04-18T14:11:28 IST" duration-ms="26899" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openApplication -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:11:28 IST" name="startTestCase" finished-at="2020-04-18T14:11:28 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.FaxLineConfigPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:11:28 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:11:33 IST" duration-ms="4890" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="FaxLineConfigPage()[pri:1, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:11:33 IST" name="FaxLineConfigPage" finished-at="2020-04-18T14:11:34 IST" duration-ms="848" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- FaxLineConfigPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:11:34 IST" name="afterEachMethod" finished-at="2020-04-18T14:11:35 IST" duration-ms="1338" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.FaxLineConfigPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:11:35 IST" name="endTestCase" finished-at="2020-04-18T14:11:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.FaxLineConfigPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:11:35 IST" name="startTestCase" finished-at="2020-04-18T14:11:35 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddFaxLineConfigRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:11:35 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:11:39 IST" duration-ms="4317" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="AddFaxLineConfigRecord()[pri:2, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:11:39 IST" name="AddFaxLineConfigRecord" finished-at="2020-04-18T14:11:57 IST" duration-ms="17238" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddFaxLineConfigRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:11:57 IST" name="afterEachMethod" finished-at="2020-04-18T14:11:58 IST" duration-ms="1590" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddFaxLineConfigRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:11:58 IST" name="endTestCase" finished-at="2020-04-18T14:11:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddFaxLineConfigRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:11:58 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:12:03 IST" duration-ms="4965" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:11:58 IST" name="startTestCase" finished-at="2020-04-18T14:11:58 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyAuditTrialReportForCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyAuditTrialReportForCreate()[pri:3, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:12:03 IST" name="VerifyAuditTrialReportForCreate" finished-at="2020-04-18T14:12:37 IST" depends-on-methods="com.tetherfi.test.fax.FaxLineConfigTest.AddFaxLineConfigRecord" duration-ms="33348" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at com.tetherfi.test.fax.FaxLineConfigTest.VerifyAuditTrialReportForCreate(FaxLineConfigTest.java:77)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForCreate -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:12:37 IST" name="afterEachMethod" finished-at="2020-04-18T14:12:38 IST" duration-ms="1400" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyAuditTrialReportForCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:12:38 IST" name="endTestCase" finished-at="2020-04-18T14:12:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyAuditTrialReportForCreate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:12:38 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:12:48 IST" duration-ms="9949" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:12:38 IST" name="startTestCase" finished-at="2020-04-18T14:12:38 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.SendersLink() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="SendersLink()[pri:4, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:12:48 IST" name="SendersLink" finished-at="2020-04-18T14:13:06 IST" duration-ms="17595" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Record Created Successfully] but found [A record already exists for same Fax Line and Fax Number]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Record Created Successfully] but found [A record already exists for same Fax Line and Fax Number]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.assertEqualsImpl(Assert.java:136)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:575)
at org.testng.Assert.assertEquals(Assert.java:585)
at com.tetherfi.test.fax.FaxLineConfigTest.SendersLink(FaxLineConfigTest.java:92)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SendersLink -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:13:06 IST" name="afterEachMethod" finished-at="2020-04-18T14:13:07 IST" duration-ms="1419" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.SendersLink() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:13:07 IST" name="endTestCase" finished-at="2020-04-18T14:13:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.SendersLink() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:13:07 IST" name="startTestCase" finished-at="2020-04-18T14:13:07 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AutoAckLink() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:13:07 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:13:12 IST" duration-ms="4818" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="AutoAckLink()[pri:5, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:13:12 IST" name="AutoAckLink" finished-at="2020-04-18T14:13:30 IST" duration-ms="18578" status="FAIL">
          <exception class="org.openqa.selenium.ElementClickInterceptedException">
            <message>
              <![CDATA[element click intercepted: Element <a role="button" class="k-button k-button-icontext k-primary k-grid-update" style="width=10px;" href="#">...</a> is not clickable at point (1044, 407). Other element would receive the click: <li tabindex="-1" role="option" unselectable="on" class="k-item" aria-selected="false" data-offset-index="2">...</li>
  (Session info: chrome=80.0.3987.163)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.1.4', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '9.0.4'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 80.0.3987.163, chrome: {chromedriverVersion: 80.0.3987.106 (f68069574609..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:54847}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: 860c35f603c02cc7a876b47bf5b6f862]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.ElementClickInterceptedException: element click intercepted: Element <a role="button" class="k-button k-button-icontext k-primary k-grid-update" style="width=10px;" href="#">...</a> is not clickable at point (1044, 407). Other element would receive the click: <li tabindex="-1" role="option" unselectable="on" class="k-item" aria-selected="false" data-offset-index="2">...</li>
  (Session info: chrome=80.0.3987.163)
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.1.4', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '9.0.4'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 80.0.3987.163, chrome: {chromedriverVersion: 80.0.3987.106 (f68069574609..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:54847}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: 860c35f603c02cc7a876b47bf5b6f862
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
at java.base/java.lang.reflect.Constructor.newInstance(Unknown Source)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:285)
at org.openqa.selenium.remote.RemoteWebElement.click(RemoteWebElement.java:84)
at jdk.internal.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:51)
at com.sun.proxy.$Proxy14.click(Unknown Source)
at com.tetherfi.pages.BasePage.selectWebElement(BasePage.java:202)
at com.tetherfi.pages.FaxAutoACKConfigurationPage.addNewFaxAutoAckConfigRecord(FaxAutoACKConfigurationPage.java:630)
at com.tetherfi.test.fax.FaxLineConfigTest.AutoAckLink(FaxLineConfigTest.java:106)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.ElementClickInterceptedException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AutoAckLink -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:13:30 IST" name="afterEachMethod" finished-at="2020-04-18T14:13:32 IST" duration-ms="1507" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AutoAckLink() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:13:32 IST" name="endTestCase" finished-at="2020-04-18T14:13:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AutoAckLink() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:13:32 IST" name="startTestCase" finished-at="2020-04-18T14:13:32 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.RoutesLink() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:13:32 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:13:37 IST" duration-ms="4610" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="RoutesLink()[pri:6, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:13:37 IST" name="RoutesLink" finished-at="2020-04-18T14:14:05 IST" duration-ms="28104" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Record Created Successfully] but found [Record for Fax Line and Type already exists]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Record Created Successfully] but found [Record for Fax Line and Type already exists]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.assertEqualsImpl(Assert.java:136)
at org.testng.Assert.assertEquals(Assert.java:118)
at org.testng.Assert.assertEquals(Assert.java:575)
at org.testng.Assert.assertEquals(Assert.java:585)
at com.tetherfi.test.fax.FaxLineConfigTest.RoutesLink(FaxLineConfigTest.java:123)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RoutesLink -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:05 IST" name="afterEachMethod" finished-at="2020-04-18T14:14:06 IST" duration-ms="1633" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.RoutesLink() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:06 IST" name="endTestCase" finished-at="2020-04-18T14:14:06 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.RoutesLink() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:06 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:14:12 IST" duration-ms="6193" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:06 IST" name="startTestCase" finished-at="2020-04-18T14:14:06 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddDuplicateFaxLineConfigRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddDuplicateFaxLineConfigRecord()[pri:7, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:12 IST" name="AddDuplicateFaxLineConfigRecord" finished-at="2020-04-18T14:14:18 IST" duration-ms="5613" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddDuplicateFaxLineConfigRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:18 IST" name="afterEachMethod" finished-at="2020-04-18T14:14:20 IST" duration-ms="1467" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddDuplicateFaxLineConfigRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:20 IST" name="endTestCase" finished-at="2020-04-18T14:14:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddDuplicateFaxLineConfigRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:20 IST" name="startTestCase" finished-at="2020-04-18T14:14:20 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutInput() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:20 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:14:25 IST" duration-ms="5119" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="AddInvalidFaxLineConfigRecordWithoutInput()[pri:8, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:25 IST" name="AddInvalidFaxLineConfigRecordWithoutInput" finished-at="2020-04-18T14:14:30 IST" duration-ms="4870" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddInvalidFaxLineConfigRecordWithoutInput -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:30 IST" name="afterEachMethod" finished-at="2020-04-18T14:14:31 IST" duration-ms="1265" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutInput() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:31 IST" name="endTestCase" finished-at="2020-04-18T14:14:31 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutInput() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:31 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:14:35 IST" duration-ms="4575" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:31 IST" name="startTestCase" finished-at="2020-04-18T14:14:31 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutFaxLine() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddInvalidFaxLineConfigRecordWithoutFaxLine()[pri:9, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:35 IST" name="AddInvalidFaxLineConfigRecordWithoutFaxLine" finished-at="2020-04-18T14:14:46 IST" duration-ms="10437" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddInvalidFaxLineConfigRecordWithoutFaxLine -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:46 IST" name="afterEachMethod" finished-at="2020-04-18T14:14:47 IST" duration-ms="1524" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutFaxLine() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:47 IST" name="endTestCase" finished-at="2020-04-18T14:14:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutFaxLine() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:47 IST" name="startTestCase" finished-at="2020-04-18T14:14:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutFaxLineName() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:47 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:14:53 IST" duration-ms="5418" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="AddInvalidFaxLineConfigRecordWithoutFaxLineName()[pri:10, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:14:53 IST" name="AddInvalidFaxLineConfigRecordWithoutFaxLineName" finished-at="2020-04-18T14:15:04 IST" duration-ms="10799" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddInvalidFaxLineConfigRecordWithoutFaxLineName -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:15:04 IST" name="afterEachMethod" finished-at="2020-04-18T14:15:05 IST" duration-ms="1254" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutFaxLineName() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:15:05 IST" name="endTestCase" finished-at="2020-04-18T14:15:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutFaxLineName() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:15:05 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:15:10 IST" duration-ms="5303" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:15:05 IST" name="startTestCase" finished-at="2020-04-18T14:15:05 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutDescription() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddInvalidFaxLineConfigRecordWithoutDescription()[pri:11, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:15:10 IST" name="AddInvalidFaxLineConfigRecordWithoutDescription" finished-at="2020-04-18T14:15:21 IST" duration-ms="10798" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddInvalidFaxLineConfigRecordWithoutDescription -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:15:21 IST" name="afterEachMethod" finished-at="2020-04-18T14:15:22 IST" duration-ms="1409" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutDescription() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:15:22 IST" name="endTestCase" finished-at="2020-04-18T14:15:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutDescription() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:15:22 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:15:28 IST" duration-ms="5880" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:15:22 IST" name="startTestCase" finished-at="2020-04-18T14:15:22 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutStatus() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="AddInvalidFaxLineConfigRecordWithoutStatus()[pri:12, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:15:28 IST" name="AddInvalidFaxLineConfigRecordWithoutStatus" finished-at="2020-04-18T14:15:37 IST" duration-ms="9023" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddInvalidFaxLineConfigRecordWithoutStatus -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:15:37 IST" name="afterEachMethod" finished-at="2020-04-18T14:15:39 IST" duration-ms="1413" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutStatus() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:15:39 IST" name="endTestCase" finished-at="2020-04-18T14:15:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutStatus() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:15:39 IST" name="startTestCase" finished-at="2020-04-18T14:15:39 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutSendStatus() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:15:39 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:15:49 IST" duration-ms="10508" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="AddInvalidFaxLineConfigRecordWithoutSendStatus()[pri:13, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:15:49 IST" name="AddInvalidFaxLineConfigRecordWithoutSendStatus" finished-at="2020-04-18T14:16:00 IST" duration-ms="10544" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddInvalidFaxLineConfigRecordWithoutSendStatus -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:00 IST" name="afterEachMethod" finished-at="2020-04-18T14:16:01 IST" duration-ms="1508" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutSendStatus() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:01 IST" name="endTestCase" finished-at="2020-04-18T14:16:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutSendStatus() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:01 IST" name="startTestCase" finished-at="2020-04-18T14:16:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutRecieveStatus() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:01 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:16:07 IST" duration-ms="5632" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="AddInvalidFaxLineConfigRecordWithoutRecieveStatus()[pri:14, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:07 IST" name="AddInvalidFaxLineConfigRecordWithoutRecieveStatus" finished-at="2020-04-18T14:16:17 IST" duration-ms="10501" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AddInvalidFaxLineConfigRecordWithoutRecieveStatus -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:17 IST" name="afterEachMethod" finished-at="2020-04-18T14:16:19 IST" duration-ms="1394" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutRecieveStatus() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:19 IST" name="endTestCase" finished-at="2020-04-18T14:16:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.AddInvalidFaxLineConfigRecordWithoutRecieveStatus() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:19 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:16:25 IST" duration-ms="6167" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:19 IST" name="startTestCase" finished-at="2020-04-18T14:16:19 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.EditFaxLineConfigCancelRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="EditFaxLineConfigCancelRecord()[pri:15, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:25 IST" name="EditFaxLineConfigCancelRecord" finished-at="2020-04-18T14:16:35 IST" duration-ms="10293" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditFaxLineConfigCancelRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:35 IST" name="afterEachMethod" finished-at="2020-04-18T14:16:37 IST" duration-ms="1307" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.EditFaxLineConfigCancelRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:37 IST" name="endTestCase" finished-at="2020-04-18T14:16:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.EditFaxLineConfigCancelRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:37 IST" name="startTestCase" finished-at="2020-04-18T14:16:37 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.EditInvalidFaxLineConfigRecord() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:37 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:16:42 IST" duration-ms="5466" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="EditInvalidFaxLineConfigRecord()[pri:16, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:42 IST" name="EditInvalidFaxLineConfigRecord" finished-at="2020-04-18T14:16:52 IST" duration-ms="10144" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditInvalidFaxLineConfigRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:52 IST" name="afterEachMethod" finished-at="2020-04-18T14:16:54 IST" duration-ms="1430" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.EditInvalidFaxLineConfigRecord() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:54 IST" name="endTestCase" finished-at="2020-04-18T14:16:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.EditInvalidFaxLineConfigRecord() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:54 IST" name="startTestCase" finished-at="2020-04-18T14:16:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.EditFaxLineConfigRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:16:54 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:17:02 IST" duration-ms="8347" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="EditFaxLineConfigRecord()[pri:17, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:17:02 IST" name="EditFaxLineConfigRecord" finished-at="2020-04-18T14:17:13 IST" depends-on-methods="com.tetherfi.test.fax.FaxLineConfigTest.AddFaxLineConfigRecord" duration-ms="10966" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EditFaxLineConfigRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:17:13 IST" name="afterEachMethod" finished-at="2020-04-18T14:17:14 IST" duration-ms="1469" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.EditFaxLineConfigRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:17:14 IST" name="endTestCase" finished-at="2020-04-18T14:17:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.EditFaxLineConfigRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:17:14 IST" name="startTestCase" finished-at="2020-04-18T14:17:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyAuditTrialReportForUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:17:14 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:17:20 IST" duration-ms="6060" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="VerifyAuditTrialReportForUpdate()[pri:18, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:17:20 IST" name="VerifyAuditTrialReportForUpdate" finished-at="2020-04-18T14:17:51 IST" depends-on-methods="com.tetherfi.test.fax.FaxLineConfigTest.EditFaxLineConfigRecord" duration-ms="31031" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForUpdate -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:17:51 IST" name="afterEachMethod" finished-at="2020-04-18T14:17:53 IST" duration-ms="1779" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyAuditTrialReportForUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:17:53 IST" name="startTestCase" finished-at="2020-04-18T14:17:53 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:17:53 IST" name="endTestCase" finished-at="2020-04-18T14:17:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyAuditTrialReportForUpdate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:17:53 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:17:59 IST" duration-ms="5648" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="searchPage()[pri:19, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:17:59 IST" name="searchPage" finished-at="2020-04-18T14:18:03 IST" duration-ms="3934" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:18:03 IST" name="afterEachMethod" finished-at="2020-04-18T14:18:04 IST" duration-ms="1487" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:18:04 IST" name="endTestCase" finished-at="2020-04-18T14:18:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.searchPage() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:18:04 IST" name="startTestCase" finished-at="2020-04-18T14:18:04 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.searchwithoutSearchTextbox() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:18:04 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:18:10 IST" duration-ms="5381" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="searchwithoutSearchTextbox()[pri:20, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:18:10 IST" name="searchwithoutSearchTextbox" finished-at="2020-04-18T14:18:13 IST" duration-ms="3389" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- searchwithoutSearchTextbox -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:18:13 IST" name="afterEachMethod" finished-at="2020-04-18T14:18:14 IST" duration-ms="1294" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.searchwithoutSearchTextbox() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:18:14 IST" name="endTestCase" finished-at="2020-04-18T14:18:14 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.searchwithoutSearchTextbox() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:18:14 IST" name="startTestCase" finished-at="2020-04-18T14:18:14 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.database() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:18:14 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:18:20 IST" duration-ms="5228" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="database()[pri:21, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:18:20 IST" name="database" finished-at="2020-04-18T14:19:25 IST" duration-ms="65228" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at com.tetherfi.test.fax.FaxLineConfigTest.database(FaxLineConfigTest.java:277)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- database -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:19:25 IST" name="afterEachMethod" finished-at="2020-04-18T14:19:26 IST" duration-ms="1349" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.database() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:19:26 IST" name="endTestCase" finished-at="2020-04-18T14:19:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.database() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:19:26 IST" name="startTestCase" finished-at="2020-04-18T14:19:26 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.DeleteCancelFaxLineConfigRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:19:26 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:19:31 IST" duration-ms="4983" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="DeleteCancelFaxLineConfigRecord()[pri:22, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:19:31 IST" name="DeleteCancelFaxLineConfigRecord" finished-at="2020-04-18T14:19:40 IST" duration-ms="8780" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteCancelFaxLineConfigRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:19:40 IST" name="afterEachMethod" finished-at="2020-04-18T14:19:41 IST" duration-ms="1340" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.DeleteCancelFaxLineConfigRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:19:41 IST" name="endTestCase" finished-at="2020-04-18T14:19:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.DeleteCancelFaxLineConfigRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:19:41 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:19:46 IST" duration-ms="4746" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:19:41 IST" name="startTestCase" finished-at="2020-04-18T14:19:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.DeleteFaxLineConfigRecordWithoutReason() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="DeleteFaxLineConfigRecordWithoutReason()[pri:23, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:19:46 IST" name="DeleteFaxLineConfigRecordWithoutReason" finished-at="2020-04-18T14:19:55 IST" duration-ms="8790" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteFaxLineConfigRecordWithoutReason -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:19:55 IST" name="afterEachMethod" finished-at="2020-04-18T14:20:01 IST" duration-ms="6395" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.DeleteFaxLineConfigRecordWithoutReason() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:20:01 IST" name="endTestCase" finished-at="2020-04-18T14:20:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.DeleteFaxLineConfigRecordWithoutReason() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:20:01 IST" name="startTestCase" finished-at="2020-04-18T14:20:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.DeleteFaxLineConfigRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:20:01 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:20:06 IST" duration-ms="4767" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="DeleteFaxLineConfigRecord()[pri:24, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:20:06 IST" name="DeleteFaxLineConfigRecord" finished-at="2020-04-18T14:20:16 IST" depends-on-methods="com.tetherfi.test.fax.FaxLineConfigTest.EditFaxLineConfigRecord" duration-ms="9929" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DeleteFaxLineConfigRecord -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:20:16 IST" name="afterEachMethod" finished-at="2020-04-18T14:20:18 IST" duration-ms="1722" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.DeleteFaxLineConfigRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:20:18 IST" name="endTestCase" finished-at="2020-04-18T14:20:18 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.DeleteFaxLineConfigRecord() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:20:18 IST" name="startTestCase" finished-at="2020-04-18T14:20:18 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyAuditTrialReportForDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:20:18 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:20:23 IST" duration-ms="5483" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="VerifyAuditTrialReportForDelete()[pri:25, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:20:23 IST" name="VerifyAuditTrialReportForDelete" finished-at="2020-04-18T14:20:54 IST" duration-ms="31331" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyAuditTrialReportForDelete -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:20:54 IST" name="afterEachMethod" finished-at="2020-04-18T14:20:56 IST" duration-ms="1478" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyAuditTrialReportForDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:20:56 IST" name="endTestCase" finished-at="2020-04-18T14:20:56 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyAuditTrialReportForDelete() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:20:56 IST" name="startTestCase" finished-at="2020-04-18T14:20:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:20:56 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:21:01 IST" duration-ms="5294" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="SearchClearSearch()[pri:26, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:21:01 IST" name="SearchClearSearch" finished-at="2020-04-18T14:21:47 IST" duration-ms="45475" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//div[text()='No records to display']"}
  (Session info: chrome=80.0.3987.163)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.1.4', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '9.0.4'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 80.0.3987.163, chrome: {chromedriverVersion: 80.0.3987.106 (f68069574609..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:54847}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: 860c35f603c02cc7a876b47bf5b6f862
*** Element info: {Using=xpath, value=//div[text()='No records to display']}]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//div[text()='No records to display']"}
  (Session info: chrome=80.0.3987.163)
For documentation on this error, please visit: https://www.seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:17:03'
System info: host: 'ADMIN', ip: '192.168.1.4', os.name: 'Windows 8.1', os.arch: 'amd64', os.version: '6.3', java.version: '9.0.4'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 80.0.3987.163, chrome: {chromedriverVersion: 80.0.3987.106 (f68069574609..., userDataDir: C:\Users\ADMINP~1\AppData\L...}, goog:chromeOptions: {debuggerAddress: localhost:54847}, javascriptEnabled: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: WINDOWS, platformName: WINDOWS, proxy: Proxy(), setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: 860c35f603c02cc7a876b47bf5b6f862
*** Element info: {Using=xpath, value=//div[text()='No records to display']}
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
at java.base/java.lang.reflect.Constructor.newInstance(Unknown Source)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:187)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:122)
at org.openqa.selenium.remote.http.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:49)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:552)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:323)
at org.openqa.selenium.remote.RemoteWebDriver.findElementByXPath(RemoteWebDriver.java:428)
at org.openqa.selenium.By$ByXPath.findElement(By.java:353)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:315)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:69)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at com.sun.proxy.$Proxy14.isDisplayed(Unknown Source)
at com.tetherfi.pages.FaxLineConfigPage.verifyinvalidsearchwithwrongdata(FaxLineConfigPage.java:926)
at com.tetherfi.test.fax.FaxLineConfigTest.SearchClearSearch(FaxLineConfigTest.java:332)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SearchClearSearch -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:21:47 IST" name="afterEachMethod" finished-at="2020-04-18T14:21:49 IST" duration-ms="1785" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:21:49 IST" name="endTestCase" finished-at="2020-04-18T14:21:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.SearchClearSearch() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:21:49 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:21:55 IST" duration-ms="6250" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:21:49 IST" name="startTestCase" finished-at="2020-04-18T14:21:49 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="ExportToExcel()[pri:27, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:21:55 IST" name="ExportToExcel" finished-at="2020-04-18T14:21:58 IST" duration-ms="3142" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExportToExcel -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:21:58 IST" name="afterEachMethod" finished-at="2020-04-18T14:21:59 IST" duration-ms="1246" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:21:59 IST" name="endTestCase" finished-at="2020-04-18T14:21:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.ExportToExcel() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:21:59 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:22:05 IST" duration-ms="5601" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:21:59 IST" name="startTestCase" finished-at="2020-04-18T14:21:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="ExportToExcelData()[pri:28, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:22:05 IST" name="ExportToExcelData" finished-at="2020-04-18T14:22:35 IST" duration-ms="29846" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at com.tetherfi.test.fax.FaxLineConfigTest.ExportToExcelData(FaxLineConfigTest.java:350)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExportToExcelData -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:22:35 IST" name="afterEachMethod" finished-at="2020-04-18T14:22:36 IST" duration-ms="1375" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:22:36 IST" name="endTestCase" finished-at="2020-04-18T14:22:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.ExportToExcelData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:22:36 IST" name="startTestCase" finished-at="2020-04-18T14:22:36 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.ExporttoExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:22:36 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:22:42 IST" duration-ms="5718" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="ExporttoExcelWithoutData()[pri:29, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:22:42 IST" name="ExporttoExcelWithoutData" finished-at="2020-04-18T14:24:09 IST" duration-ms="87175" status="FAIL">
          <exception class="java.lang.IndexOutOfBoundsException">
            <message>
              <![CDATA[Index 0 out-of-bounds for length 0]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IndexOutOfBoundsException: Index 0 out-of-bounds for length 0
at java.base/jdk.internal.util.Preconditions.outOfBounds(Unknown Source)
at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Unknown Source)
at java.base/jdk.internal.util.Preconditions.checkIndex(Unknown Source)
at java.base/java.util.Objects.checkIndex(Unknown Source)
at java.base/java.util.ArrayList.get(Unknown Source)
at java.base/jdk.internal.reflect.GeneratedMethodAccessor11.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementListHandler.invoke(LocatingElementListHandler.java:39)
at com.sun.proxy.$Proxy15.get(Unknown Source)
at com.tetherfi.pages.FaxLineConfigPage.ExporttoExcelWithoutData(FaxLineConfigPage.java:552)
at com.tetherfi.test.fax.FaxLineConfigTest.ExporttoExcelWithoutData(FaxLineConfigTest.java:360)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IndexOutOfBoundsException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ExporttoExcelWithoutData -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:24:09 IST" name="afterEachMethod" finished-at="2020-04-18T14:24:10 IST" duration-ms="1453" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.ExporttoExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:24:10 IST" name="endTestCase" finished-at="2020-04-18T14:24:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.ExporttoExcelWithoutData() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:24:10 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:24:16 IST" duration-ms="5713" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:24:10 IST" name="startTestCase" finished-at="2020-04-18T14:24:10 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.SortingByAscending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="SortingByAscending()[pri:30, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:24:16 IST" name="SortingByAscending" finished-at="2020-04-18T14:24:57 IST" duration-ms="41340" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at com.tetherfi.test.fax.FaxLineConfigTest.SortingByAscending(FaxLineConfigTest.java:369)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SortingByAscending -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:24:57 IST" name="afterEachMethod" finished-at="2020-04-18T14:24:59 IST" duration-ms="1609" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.SortingByAscending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:24:59 IST" name="endTestCase" finished-at="2020-04-18T14:24:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.SortingByAscending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:24:59 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:25:04 IST" duration-ms="4804" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:24:59 IST" name="startTestCase" finished-at="2020-04-18T14:24:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.SortingByDescending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="SortingByDescending()[pri:31, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:25:04 IST" name="SortingByDescending" finished-at="2020-04-18T14:25:36 IST" duration-ms="31869" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at org.testng.Assert.assertTrue(Assert.java:53)
at com.tetherfi.test.fax.FaxLineConfigTest.SortingByDescending(FaxLineConfigTest.java:378)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SortingByDescending -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:25:36 IST" name="afterEachMethod" finished-at="2020-04-18T14:25:37 IST" duration-ms="1539" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.SortingByDescending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:25:37 IST" name="endTestCase" finished-at="2020-04-18T14:25:37 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.SortingByDescending() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:25:37 IST" name="startTestCase" finished-at="2020-04-18T14:25:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.GroupBy()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:25:37 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:25:43 IST" duration-ms="5342" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="GroupBy()[pri:32, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:25:43 IST" name="GroupBy" finished-at="2020-04-18T14:25:46 IST" duration-ms="3225" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- GroupBy -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:25:46 IST" name="afterEachMethod" finished-at="2020-04-18T14:25:47 IST" duration-ms="1451" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.GroupBy()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:25:47 IST" name="endTestCase" finished-at="2020-04-18T14:25:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.GroupBy()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:25:47 IST" name="startTestCase" finished-at="2020-04-18T14:25:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyArrowMoveForPreviousAndNextPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:25:47 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:25:53 IST" duration-ms="5558" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="VerifyArrowMoveForPreviousAndNextPage()[pri:33, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:25:53 IST" name="VerifyArrowMoveForPreviousAndNextPage" finished-at="2020-04-18T14:25:54 IST" duration-ms="1443" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[arrow move for previous and next page assertion failed did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: arrow move for previous and next page assertion failed did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at com.tetherfi.test.fax.FaxLineConfigTest.VerifyArrowMoveForPreviousAndNextPage(FaxLineConfigTest.java:394)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyArrowMoveForPreviousAndNextPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:25:54 IST" name="afterEachMethod" finished-at="2020-04-18T14:26:01 IST" duration-ms="6467" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyArrowMoveForPreviousAndNextPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:01 IST" name="endTestCase" finished-at="2020-04-18T14:26:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyArrowMoveForPreviousAndNextPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:01 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:26:06 IST" duration-ms="5225" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:01 IST" name="startTestCase" finished-at="2020-04-18T14:26:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyArrowMoveForFirstAndLastPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method signature="VerifyArrowMoveForFirstAndLastPage()[pri:34, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:06 IST" name="VerifyArrowMoveForFirstAndLastPage" finished-at="2020-04-18T14:26:07 IST" duration-ms="1458" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[arrow move for first and last page assertion failed did not expect to find [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: arrow move for first and last page assertion failed did not expect to find [true] but found [false]
at org.testng.Assert.fail(Assert.java:97)
at org.testng.Assert.failNotEquals(Assert.java:969)
at org.testng.Assert.assertTrue(Assert.java:43)
at com.tetherfi.test.fax.FaxLineConfigTest.VerifyArrowMoveForFirstAndLastPage(FaxLineConfigTest.java:400)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.base/java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyArrowMoveForFirstAndLastPage -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:07 IST" name="afterEachMethod" finished-at="2020-04-18T14:26:09 IST" duration-ms="1303" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyArrowMoveForFirstAndLastPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:09 IST" name="endTestCase" finished-at="2020-04-18T14:26:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyArrowMoveForFirstAndLastPage()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:09 IST" name="startTestCase" finished-at="2020-04-18T14:26:09 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyTotalNumberOfItemsPerPageDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:09 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:26:15 IST" duration-ms="6770" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="VerifyTotalNumberOfItemsPerPageDetails()[pri:35, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:15 IST" name="VerifyTotalNumberOfItemsPerPageDetails" finished-at="2020-04-18T14:26:16 IST" duration-ms="96" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyTotalNumberOfItemsPerPageDetails -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:16 IST" name="afterEachMethod" finished-at="2020-04-18T14:26:17 IST" duration-ms="1258" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyTotalNumberOfItemsPerPageDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:17 IST" name="endTestCase" finished-at="2020-04-18T14:26:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyTotalNumberOfItemsPerPageDetails()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:17 IST" name="startTestCase" finished-at="2020-04-18T14:26:17 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyNumberOfItemsPerPageSelection()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:17 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:26:22 IST" duration-ms="5196" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="VerifyNumberOfItemsPerPageSelection()[pri:36, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:22 IST" name="VerifyNumberOfItemsPerPageSelection" finished-at="2020-04-18T14:26:39 IST" duration-ms="17115" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyNumberOfItemsPerPageSelection -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:39 IST" name="afterEachMethod" finished-at="2020-04-18T14:26:40 IST" duration-ms="1274" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyNumberOfItemsPerPageSelection()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:40 IST" name="endTestCase" finished-at="2020-04-18T14:26:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyNumberOfItemsPerPageSelection()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:40 IST" name="startTestCase" finished-at="2020-04-18T14:26:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:40 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:26:46 IST" duration-ms="5782" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="VerifyDropdownForAllTheColumns()[pri:37, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:26:46 IST" name="VerifyDropdownForAllTheColumns" finished-at="2020-04-18T14:27:40 IST" duration-ms="53723" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyDropdownForAllTheColumns -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:27:40 IST" name="afterEachMethod" finished-at="2020-04-18T14:27:42 IST" duration-ms="1678" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:27:42 IST" name="endTestCase" finished-at="2020-04-18T14:27:42 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyDropdownForAllTheColumns()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:27:42 IST" name="startTestCase" finished-at="2020-04-18T14:27:42 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyColumnsHeaderEnable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:27:42 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:27:47 IST" duration-ms="5474" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="VerifyColumnsHeaderEnable()[pri:38, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:27:47 IST" name="VerifyColumnsHeaderEnable" finished-at="2020-04-18T14:27:57 IST" duration-ms="9804" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyColumnsHeaderEnable -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:27:57 IST" name="afterEachMethod" finished-at="2020-04-18T14:28:01 IST" duration-ms="4060" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyColumnsHeaderEnable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:28:01 IST" name="endTestCase" finished-at="2020-04-18T14:28:01 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyColumnsHeaderEnable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="startTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:28:01 IST" name="startTestCase" finished-at="2020-04-18T14:28:01 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestCase -->
        <test-method is-config="true" signature="NavigateToFaxLineConfigPage()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:28:01 IST" name="NavigateToFaxLineConfigPage" finished-at="2020-04-18T14:28:08 IST" duration-ms="6925" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NavigateToFaxLineConfigPage -->
        <test-method signature="VerifyColumnsHeaderDisable()[pri:39, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:28:08 IST" name="VerifyColumnsHeaderDisable" finished-at="2020-04-18T14:28:20 IST" duration-ms="12082" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyColumnsHeaderDisable -->
        <test-method is-config="true" signature="afterEachMethod(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:28:20 IST" name="afterEachMethod" finished-at="2020-04-18T14:28:21 IST" duration-ms="1345" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterEachMethod -->
        <test-method is-config="true" signature="endTestCase(java.lang.reflect.Method)[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:28:21 IST" name="endTestCase" finished-at="2020-04-18T14:28:21 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.tetherfi.test.fax.FaxLineConfigTest.VerifyColumnsHeaderDisable()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endTestCase -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:com.tetherfi.test.fax.FaxLineConfigTest@6ff0b1cc]" started-at="2020-04-18T14:28:21 IST" name="tearDown" finished-at="2020-04-18T14:28:25 IST" duration-ms="3613" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.tetherfi.test.fax.FaxLineConfigTest -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
